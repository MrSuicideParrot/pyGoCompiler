Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    CHAN
    CONST
    CONTINUE
    DEFAULT
    DEFER
    ELSE
    FALLTHROUGH
    FOR
    FUNC
    GO
    GOTO
    IF
    IMPORT
    INTERFACE
    MAP
    PACKAGE
    RANGE
    RETURN
    SELECT
    STRUCT
    SWITCH
    TYPE
    VAR

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID EQUALS expression
Rule 2     statement -> expression
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> expression MINUS expression
Rule 5     expression -> expression TIMES expression
Rule 6     expression -> expression DIVIDE expression
Rule 7     expression -> MINUS expression
Rule 8     expression -> INT
Rule 9     expression -> FLOAT
Rule 10    expression -> LPAREN expression RPAREN
Rule 11    expression -> ID

Terminals, with rules where they appear

BREAK                : 
CASE                 : 
CHAN                 : 
CONST                : 
CONTINUE             : 
DEFAULT              : 
DEFER                : 
DIVIDE               : 6
ELSE                 : 
EQUALS               : 1
FALLTHROUGH          : 
FLOAT                : 9
FOR                  : 
FUNC                 : 
GO                   : 
GOTO                 : 
ID                   : 1 11
IF                   : 
IMPORT               : 
INT                  : 8
INTERFACE            : 
LPAREN               : 10
MAP                  : 
MINUS                : 4 7
PACKAGE              : 
PLUS                 : 3
RANGE                : 
RETURN               : 
RPAREN               : 10
SELECT               : 
STRUCT               : 
SWITCH               : 
TIMES                : 5
TYPE                 : 
VAR                  : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6 7 10
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ID EQUALS expression
    (2) statement -> . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . ID

    ID              shift and go to state 2
    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7

    statement                      shift and go to state 1
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> ID . EQUALS expression
    (11) expression -> ID .

    EQUALS          shift and go to state 8
    PLUS            reduce using rule 11 (expression -> ID .)
    MINUS           reduce using rule 11 (expression -> ID .)
    TIMES           reduce using rule 11 (expression -> ID .)
    DIVIDE          reduce using rule 11 (expression -> ID .)
    $end            reduce using rule 11 (expression -> ID .)


state 3

    (2) statement -> expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 2 (statement -> expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12


state 4

    (7) expression -> MINUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 14

    expression                     shift and go to state 13

state 5

    (8) expression -> INT .

    PLUS            reduce using rule 8 (expression -> INT .)
    MINUS           reduce using rule 8 (expression -> INT .)
    TIMES           reduce using rule 8 (expression -> INT .)
    DIVIDE          reduce using rule 8 (expression -> INT .)
    $end            reduce using rule 8 (expression -> INT .)
    RPAREN          reduce using rule 8 (expression -> INT .)


state 6

    (9) expression -> FLOAT .

    PLUS            reduce using rule 9 (expression -> FLOAT .)
    MINUS           reduce using rule 9 (expression -> FLOAT .)
    TIMES           reduce using rule 9 (expression -> FLOAT .)
    DIVIDE          reduce using rule 9 (expression -> FLOAT .)
    $end            reduce using rule 9 (expression -> FLOAT .)
    RPAREN          reduce using rule 9 (expression -> FLOAT .)


state 7

    (10) expression -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 14

    expression                     shift and go to state 15

state 8

    (1) statement -> ID EQUALS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 14

    expression                     shift and go to state 16

state 9

    (3) expression -> expression PLUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 14

    expression                     shift and go to state 17

state 10

    (4) expression -> expression MINUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 14

    expression                     shift and go to state 18

state 11

    (5) expression -> expression TIMES . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 14

    expression                     shift and go to state 19

state 12

    (6) expression -> expression DIVIDE . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . MINUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 14

    expression                     shift and go to state 20

state 13

    (7) expression -> MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> MINUS expression .)
    MINUS           reduce using rule 7 (expression -> MINUS expression .)
    TIMES           reduce using rule 7 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 7 (expression -> MINUS expression .)
    $end            reduce using rule 7 (expression -> MINUS expression .)
    RPAREN          reduce using rule 7 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]


state 14

    (11) expression -> ID .

    PLUS            reduce using rule 11 (expression -> ID .)
    MINUS           reduce using rule 11 (expression -> ID .)
    TIMES           reduce using rule 11 (expression -> ID .)
    DIVIDE          reduce using rule 11 (expression -> ID .)
    $end            reduce using rule 11 (expression -> ID .)
    RPAREN          reduce using rule 11 (expression -> ID .)


state 15

    (10) expression -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 21
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12


state 16

    (1) statement -> ID EQUALS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> ID EQUALS expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12


state 17

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 3 (expression -> expression PLUS expression .)
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12

  ! TIMES           [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 18

    (4) expression -> expression MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 4 (expression -> expression MINUS expression .)
    $end            reduce using rule 4 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12

  ! TIMES           [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 19

    (5) expression -> expression TIMES expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 5 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 5 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 5 (expression -> expression TIMES expression .)
    $end            reduce using rule 5 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 5 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]


state 20

    (6) expression -> expression DIVIDE expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 6 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 6 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 6 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 6 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 6 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]


state 21

    (10) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 10 (expression -> LPAREN expression RPAREN .)

