Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    BREAK
    CASE
    CHAN
    CONST
    CONTINUE
    DEFAULT
    DEFER
    FALLTHROUGH
    GO
    GOTO
    INTERFACE
    MAP
    RANGE
    RETURN
    SELECT
    STRUCT
    SWITCH
    TYPE
    VAR

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
Rule 2     statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET
Rule 3     list -> inst
Rule 4     list -> inst list
Rule 5     assignment -> ID ASSIGN expressionAR
Rule 6     assignment -> ID ASSIGN expressionBo
Rule 7     assignment -> ID EQUALS expressionAR
Rule 8     assignment -> ID EQUALS expressionBo
Rule 9     inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET
Rule 10    inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET
Rule 11    inst -> assignment SEMICOLON
Rule 12    inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
Rule 13    inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET
Rule 14    listID -> expressionAR
Rule 15    listID -> expressionBo
Rule 16    listID -> expressionBo COMMA listID
Rule 17    listID -> expressionAR COMMA listID
Rule 18    inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
Rule 19    inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
Rule 20    expressionAR -> expressionAR PLUS expressionAR
Rule 21    expressionAR -> expressionAR MINUS expressionAR
Rule 22    expressionAR -> expressionAR TIMES expressionAR
Rule 23    expressionAR -> expressionAR DIVIDE expressionAR
Rule 24    expressionAR -> ID
Rule 25    expressionAR -> INT
Rule 26    expressionAR -> MINUS expressionAR
Rule 27    expressionAR -> FLOAT
Rule 28    expressionAR -> LPAREN expressionAR RPAREN
Rule 29    expressionBo -> expressionAR MORE expressionAR
Rule 30    expressionBo -> expressionAR LESS expressionAR
Rule 31    expressionBo -> expressionAR MOREEQUAL expressionAR
Rule 32    expressionBo -> expressionAR LESSEQUAL expressionAR
Rule 33    expressionBo -> expressionBo NOTEQUAL expressionBo
Rule 34    expressionBo -> expressionAR NOTEQUAL expressionAR
Rule 35    expressionBo -> expressionBo EQUALSTO expressionBo
Rule 36    expressionBo -> expressionAR EQUALSTO expressionAR
Rule 37    expressionBo -> NOT expressionBo
Rule 38    expressionBo -> TRUE
Rule 39    expressionBo -> FALSE
Rule 40    expressionBo -> LPAREN expressionBo RPAREN

Terminals, with rules where they appear

ASSIGN               : 5 6
BREAK                : 
CASE                 : 
CHAN                 : 
COMMA                : 16 17
COMMENT              : 
CONST                : 
CONTINUE             : 
DEFAULT              : 
DEFER                : 
DIVIDE               : 23
ELSE                 : 12
EQUALS               : 7 8
EQUALSTO             : 35 36
FALLTHROUGH          : 
FALSE                : 39
FLOAT                : 27
FMT                  : 18 19
FOR                  : 9 10
FUNC                 : 1 2
GO                   : 
GOTO                 : 
ID                   : 5 6 7 8 24
IF                   : 12 13
IMPORT               : 1 2
INT                  : 25
INTERFACE            : 
LCURLBRACKET         : 1 2 9 10 12 12 13
LESS                 : 30
LESSEQUAL            : 32
LPAREN               : 1 2 18 19 28 40
MAIN                 : 1 1 2 2
MAP                  : 
MINUS                : 21 26
MORE                 : 29
MOREEQUAL            : 31
NOT                  : 37
NOTEQUAL             : 33 34
PACKAGE              : 1 2
PLUS                 : 20
POINT                : 18 19
PRINT                : 18
RANGE                : 
RCURLBRACKET         : 1 2 9 10 12 12 13
RETURN               : 
RPAREN               : 1 2 18 19 28 40
SCAN                 : 19
SELECT               : 
SEMICOLON            : 10 10 11 18 19
STRING               : 1 2
STRUCT               : 
SWITCH               : 
TIMES                : 22
TRUE                 : 38
TYPE                 : 
VAR                  : 
error                : 

Nonterminals, with rules where they appear

assignment           : 10 11
expressionAR         : 5 7 10 14 17 20 20 21 21 22 22 23 23 26 28 29 29 30 30 31 31 32 32 34 34 36 36
expressionBo         : 6 8 9 10 12 13 15 16 33 33 35 35 37 40
inst                 : 3 4
list                 : 1 4 9 10 12 12 13
listID               : 16 17 18 19
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> . PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    PACKAGE         shift and go to state 2

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> PACKAGE . MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE . MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    MAIN            shift and go to state 3


state 3

    (1) statement -> PACKAGE MAIN . IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN . IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    IMPORT          shift and go to state 4


state 4

    (1) statement -> PACKAGE MAIN IMPORT . STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT . STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    STRING          shift and go to state 5


state 5

    (1) statement -> PACKAGE MAIN IMPORT STRING . FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING . FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    FUNC            shift and go to state 6


state 6

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC . MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC . MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    MAIN            shift and go to state 7


state 7

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN . LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN . LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    LPAREN          shift and go to state 8


state 8

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN . RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN . RPAREN LCURLBRACKET RCURLBRACKET

    RPAREN          shift and go to state 9


state 9

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN . LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN . LCURLBRACKET RCURLBRACKET

    LCURLBRACKET    shift and go to state 10


state 10

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET . list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET . RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (9) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (10) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET
    (11) inst -> . assignment SEMICOLON
    (12) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (18) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (19) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo

    RCURLBRACKET    shift and go to state 12
    FOR             shift and go to state 14
    IF              shift and go to state 16
    FMT             shift and go to state 17
    ID              shift and go to state 18

    list                           shift and go to state 11
    inst                           shift and go to state 13
    assignment                     shift and go to state 15

state 11

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 19


state 12

    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET .

    $end            reduce using rule 2 (statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET .)


state 13

    (3) list -> inst .
    (4) list -> inst . list
    (3) list -> . inst
    (4) list -> . inst list
    (9) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (10) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET
    (11) inst -> . assignment SEMICOLON
    (12) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (18) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (19) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo

    RCURLBRACKET    reduce using rule 3 (list -> inst .)
    FOR             shift and go to state 14
    IF              shift and go to state 16
    FMT             shift and go to state 17
    ID              shift and go to state 18

    inst                           shift and go to state 13
    list                           shift and go to state 20
    assignment                     shift and go to state 15

state 14

    (9) inst -> FOR . expressionBo LCURLBRACKET list RCURLBRACKET
    (10) inst -> FOR . assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    LPAREN          shift and go to state 27
    ID              shift and go to state 28
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31

    expressionBo                   shift and go to state 21
    assignment                     shift and go to state 22
    expressionAR                   shift and go to state 23

state 15

    (11) inst -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 32


state 16

    (12) inst -> IF . expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> IF . expressionBo LCURLBRACKET list RCURLBRACKET
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    LPAREN          shift and go to state 27
    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31

    expressionBo                   shift and go to state 33
    expressionAR                   shift and go to state 23

state 17

    (18) inst -> FMT . POINT PRINT LPAREN listID RPAREN SEMICOLON
    (19) inst -> FMT . POINT SCAN LPAREN listID RPAREN SEMICOLON

    POINT           shift and go to state 35


state 18

    (5) assignment -> ID . ASSIGN expressionAR
    (6) assignment -> ID . ASSIGN expressionBo
    (7) assignment -> ID . EQUALS expressionAR
    (8) assignment -> ID . EQUALS expressionBo

    ASSIGN          shift and go to state 36
    EQUALS          shift and go to state 37


state 19

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET .

    $end            reduce using rule 1 (statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET .)


state 20

    (4) list -> inst list .

    RCURLBRACKET    reduce using rule 4 (list -> inst list .)


state 21

    (9) inst -> FOR expressionBo . LCURLBRACKET list RCURLBRACKET
    (33) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (35) expressionBo -> expressionBo . EQUALSTO expressionBo

    LCURLBRACKET    shift and go to state 38
    NOTEQUAL        shift and go to state 39
    EQUALSTO        shift and go to state 40


state 22

    (10) inst -> FOR assignment . SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET

    SEMICOLON       shift and go to state 41


state 23

    (29) expressionBo -> expressionAR . MORE expressionAR
    (30) expressionBo -> expressionAR . LESS expressionAR
    (31) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (32) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (34) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (36) expressionBo -> expressionAR . EQUALSTO expressionAR
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            shift and go to state 42
    LESS            shift and go to state 43
    MOREEQUAL       shift and go to state 44
    LESSEQUAL       shift and go to state 45
    NOTEQUAL        shift and go to state 46
    EQUALSTO        shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51


state 24

    (37) expressionBo -> NOT . expressionBo
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    LPAREN          shift and go to state 27
    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31

    expressionBo                   shift and go to state 52
    expressionAR                   shift and go to state 23

state 25

    (38) expressionBo -> TRUE .

    LCURLBRACKET    reduce using rule 38 (expressionBo -> TRUE .)
    NOTEQUAL        reduce using rule 38 (expressionBo -> TRUE .)
    EQUALSTO        reduce using rule 38 (expressionBo -> TRUE .)
    RPAREN          reduce using rule 38 (expressionBo -> TRUE .)
    SEMICOLON       reduce using rule 38 (expressionBo -> TRUE .)
    COMMA           reduce using rule 38 (expressionBo -> TRUE .)


state 26

    (39) expressionBo -> FALSE .

    LCURLBRACKET    reduce using rule 39 (expressionBo -> FALSE .)
    NOTEQUAL        reduce using rule 39 (expressionBo -> FALSE .)
    EQUALSTO        reduce using rule 39 (expressionBo -> FALSE .)
    RPAREN          reduce using rule 39 (expressionBo -> FALSE .)
    SEMICOLON       reduce using rule 39 (expressionBo -> FALSE .)
    COMMA           reduce using rule 39 (expressionBo -> FALSE .)


state 27

    (40) expressionBo -> LPAREN . expressionBo RPAREN
    (28) expressionAR -> LPAREN . expressionAR RPAREN
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    LPAREN          shift and go to state 27
    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31

    expressionBo                   shift and go to state 53
    expressionAR                   shift and go to state 54

state 28

    (5) assignment -> ID . ASSIGN expressionAR
    (6) assignment -> ID . ASSIGN expressionBo
    (7) assignment -> ID . EQUALS expressionAR
    (8) assignment -> ID . EQUALS expressionBo
    (24) expressionAR -> ID .

    ASSIGN          shift and go to state 36
    EQUALS          shift and go to state 37
    MORE            reduce using rule 24 (expressionAR -> ID .)
    LESS            reduce using rule 24 (expressionAR -> ID .)
    MOREEQUAL       reduce using rule 24 (expressionAR -> ID .)
    LESSEQUAL       reduce using rule 24 (expressionAR -> ID .)
    NOTEQUAL        reduce using rule 24 (expressionAR -> ID .)
    EQUALSTO        reduce using rule 24 (expressionAR -> ID .)
    PLUS            reduce using rule 24 (expressionAR -> ID .)
    MINUS           reduce using rule 24 (expressionAR -> ID .)
    TIMES           reduce using rule 24 (expressionAR -> ID .)
    DIVIDE          reduce using rule 24 (expressionAR -> ID .)


state 29

    (26) expressionAR -> MINUS . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 55

state 30

    (25) expressionAR -> INT .

    MORE            reduce using rule 25 (expressionAR -> INT .)
    LESS            reduce using rule 25 (expressionAR -> INT .)
    MOREEQUAL       reduce using rule 25 (expressionAR -> INT .)
    LESSEQUAL       reduce using rule 25 (expressionAR -> INT .)
    NOTEQUAL        reduce using rule 25 (expressionAR -> INT .)
    EQUALSTO        reduce using rule 25 (expressionAR -> INT .)
    PLUS            reduce using rule 25 (expressionAR -> INT .)
    MINUS           reduce using rule 25 (expressionAR -> INT .)
    TIMES           reduce using rule 25 (expressionAR -> INT .)
    DIVIDE          reduce using rule 25 (expressionAR -> INT .)
    RPAREN          reduce using rule 25 (expressionAR -> INT .)
    SEMICOLON       reduce using rule 25 (expressionAR -> INT .)
    LCURLBRACKET    reduce using rule 25 (expressionAR -> INT .)
    COMMA           reduce using rule 25 (expressionAR -> INT .)


state 31

    (27) expressionAR -> FLOAT .

    MORE            reduce using rule 27 (expressionAR -> FLOAT .)
    LESS            reduce using rule 27 (expressionAR -> FLOAT .)
    MOREEQUAL       reduce using rule 27 (expressionAR -> FLOAT .)
    LESSEQUAL       reduce using rule 27 (expressionAR -> FLOAT .)
    NOTEQUAL        reduce using rule 27 (expressionAR -> FLOAT .)
    EQUALSTO        reduce using rule 27 (expressionAR -> FLOAT .)
    PLUS            reduce using rule 27 (expressionAR -> FLOAT .)
    MINUS           reduce using rule 27 (expressionAR -> FLOAT .)
    TIMES           reduce using rule 27 (expressionAR -> FLOAT .)
    DIVIDE          reduce using rule 27 (expressionAR -> FLOAT .)
    RPAREN          reduce using rule 27 (expressionAR -> FLOAT .)
    SEMICOLON       reduce using rule 27 (expressionAR -> FLOAT .)
    LCURLBRACKET    reduce using rule 27 (expressionAR -> FLOAT .)
    COMMA           reduce using rule 27 (expressionAR -> FLOAT .)


state 32

    (11) inst -> assignment SEMICOLON .

    FOR             reduce using rule 11 (inst -> assignment SEMICOLON .)
    IF              reduce using rule 11 (inst -> assignment SEMICOLON .)
    FMT             reduce using rule 11 (inst -> assignment SEMICOLON .)
    ID              reduce using rule 11 (inst -> assignment SEMICOLON .)
    RCURLBRACKET    reduce using rule 11 (inst -> assignment SEMICOLON .)


state 33

    (12) inst -> IF expressionBo . LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> IF expressionBo . LCURLBRACKET list RCURLBRACKET
    (33) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (35) expressionBo -> expressionBo . EQUALSTO expressionBo

    LCURLBRACKET    shift and go to state 57
    NOTEQUAL        shift and go to state 39
    EQUALSTO        shift and go to state 40


state 34

    (24) expressionAR -> ID .

    MORE            reduce using rule 24 (expressionAR -> ID .)
    LESS            reduce using rule 24 (expressionAR -> ID .)
    MOREEQUAL       reduce using rule 24 (expressionAR -> ID .)
    LESSEQUAL       reduce using rule 24 (expressionAR -> ID .)
    NOTEQUAL        reduce using rule 24 (expressionAR -> ID .)
    EQUALSTO        reduce using rule 24 (expressionAR -> ID .)
    PLUS            reduce using rule 24 (expressionAR -> ID .)
    MINUS           reduce using rule 24 (expressionAR -> ID .)
    TIMES           reduce using rule 24 (expressionAR -> ID .)
    DIVIDE          reduce using rule 24 (expressionAR -> ID .)
    RPAREN          reduce using rule 24 (expressionAR -> ID .)
    SEMICOLON       reduce using rule 24 (expressionAR -> ID .)
    LCURLBRACKET    reduce using rule 24 (expressionAR -> ID .)
    COMMA           reduce using rule 24 (expressionAR -> ID .)


state 35

    (18) inst -> FMT POINT . PRINT LPAREN listID RPAREN SEMICOLON
    (19) inst -> FMT POINT . SCAN LPAREN listID RPAREN SEMICOLON

    PRINT           shift and go to state 58
    SCAN            shift and go to state 59


state 36

    (5) assignment -> ID ASSIGN . expressionAR
    (6) assignment -> ID ASSIGN . expressionBo
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 62
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expressionAR                   shift and go to state 60
    expressionBo                   shift and go to state 61

state 37

    (7) assignment -> ID EQUALS . expressionAR
    (8) assignment -> ID EQUALS . expressionBo
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 62
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expressionAR                   shift and go to state 63
    expressionBo                   shift and go to state 64

state 38

    (9) inst -> FOR expressionBo LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (9) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (10) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET
    (11) inst -> . assignment SEMICOLON
    (12) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (18) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (19) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo

    FOR             shift and go to state 14
    IF              shift and go to state 16
    FMT             shift and go to state 17
    ID              shift and go to state 18

    list                           shift and go to state 65
    inst                           shift and go to state 13
    assignment                     shift and go to state 15

state 39

    (33) expressionBo -> expressionBo NOTEQUAL . expressionBo
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    LPAREN          shift and go to state 27
    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31

    expressionBo                   shift and go to state 66
    expressionAR                   shift and go to state 23

state 40

    (35) expressionBo -> expressionBo EQUALSTO . expressionBo
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    LPAREN          shift and go to state 27
    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31

    expressionBo                   shift and go to state 67
    expressionAR                   shift and go to state 23

state 41

    (10) inst -> FOR assignment SEMICOLON . expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    LPAREN          shift and go to state 27
    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31

    expressionBo                   shift and go to state 68
    expressionAR                   shift and go to state 23

state 42

    (29) expressionBo -> expressionAR MORE . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 69

state 43

    (30) expressionBo -> expressionAR LESS . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 70

state 44

    (31) expressionBo -> expressionAR MOREEQUAL . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 71

state 45

    (32) expressionBo -> expressionAR LESSEQUAL . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 72

state 46

    (34) expressionBo -> expressionAR NOTEQUAL . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 73

state 47

    (36) expressionBo -> expressionAR EQUALSTO . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 74

state 48

    (20) expressionAR -> expressionAR PLUS . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 75

state 49

    (21) expressionAR -> expressionAR MINUS . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 76

state 50

    (22) expressionAR -> expressionAR TIMES . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 77

state 51

    (23) expressionAR -> expressionAR DIVIDE . expressionAR
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 78

state 52

    (37) expressionBo -> NOT expressionBo .
    (33) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (35) expressionBo -> expressionBo . EQUALSTO expressionBo

    LCURLBRACKET    reduce using rule 37 (expressionBo -> NOT expressionBo .)
    NOTEQUAL        reduce using rule 37 (expressionBo -> NOT expressionBo .)
    EQUALSTO        reduce using rule 37 (expressionBo -> NOT expressionBo .)
    RPAREN          reduce using rule 37 (expressionBo -> NOT expressionBo .)
    SEMICOLON       reduce using rule 37 (expressionBo -> NOT expressionBo .)
    COMMA           reduce using rule 37 (expressionBo -> NOT expressionBo .)

  ! NOTEQUAL        [ shift and go to state 39 ]
  ! EQUALSTO        [ shift and go to state 40 ]


state 53

    (40) expressionBo -> LPAREN expressionBo . RPAREN
    (33) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (35) expressionBo -> expressionBo . EQUALSTO expressionBo

    RPAREN          shift and go to state 79
    NOTEQUAL        shift and go to state 39
    EQUALSTO        shift and go to state 40


state 54

    (28) expressionAR -> LPAREN expressionAR . RPAREN
    (29) expressionBo -> expressionAR . MORE expressionAR
    (30) expressionBo -> expressionAR . LESS expressionAR
    (31) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (32) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (34) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (36) expressionBo -> expressionAR . EQUALSTO expressionAR
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    RPAREN          shift and go to state 80
    MORE            shift and go to state 42
    LESS            shift and go to state 43
    MOREEQUAL       shift and go to state 44
    LESSEQUAL       shift and go to state 45
    NOTEQUAL        shift and go to state 46
    EQUALSTO        shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51


state 55

    (26) expressionAR -> MINUS expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    LESS            reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    MOREEQUAL       reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    LESSEQUAL       reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    NOTEQUAL        reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    EQUALSTO        reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    PLUS            reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    MINUS           reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    TIMES           reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    DIVIDE          reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    RPAREN          reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    SEMICOLON       reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    LCURLBRACKET    reduce using rule 26 (expressionAR -> MINUS expressionAR .)
    COMMA           reduce using rule 26 (expressionAR -> MINUS expressionAR .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]


state 56

    (28) expressionAR -> LPAREN . expressionAR RPAREN
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 81

state 57

    (12) inst -> IF expressionBo LCURLBRACKET . list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> IF expressionBo LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (9) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (10) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET
    (11) inst -> . assignment SEMICOLON
    (12) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (18) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (19) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo

    FOR             shift and go to state 14
    IF              shift and go to state 16
    FMT             shift and go to state 17
    ID              shift and go to state 18

    list                           shift and go to state 82
    inst                           shift and go to state 13
    assignment                     shift and go to state 15

state 58

    (18) inst -> FMT POINT PRINT . LPAREN listID RPAREN SEMICOLON

    LPAREN          shift and go to state 83


state 59

    (19) inst -> FMT POINT SCAN . LPAREN listID RPAREN SEMICOLON

    LPAREN          shift and go to state 84


state 60

    (5) assignment -> ID ASSIGN expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR
    (29) expressionBo -> expressionAR . MORE expressionAR
    (30) expressionBo -> expressionAR . LESS expressionAR
    (31) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (32) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (34) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (36) expressionBo -> expressionAR . EQUALSTO expressionAR

    SEMICOLON       reduce using rule 5 (assignment -> ID ASSIGN expressionAR .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MORE            shift and go to state 42
    LESS            shift and go to state 43
    MOREEQUAL       shift and go to state 44
    LESSEQUAL       shift and go to state 45
    NOTEQUAL        shift and go to state 46
    EQUALSTO        shift and go to state 47


state 61

    (6) assignment -> ID ASSIGN expressionBo .
    (33) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (35) expressionBo -> expressionBo . EQUALSTO expressionBo

    SEMICOLON       reduce using rule 6 (assignment -> ID ASSIGN expressionBo .)
    NOTEQUAL        shift and go to state 39
    EQUALSTO        shift and go to state 40


state 62

    (28) expressionAR -> LPAREN . expressionAR RPAREN
    (40) expressionBo -> LPAREN . expressionBo RPAREN
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 62
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expressionAR                   shift and go to state 85
    expressionBo                   shift and go to state 53

state 63

    (7) assignment -> ID EQUALS expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR
    (29) expressionBo -> expressionAR . MORE expressionAR
    (30) expressionBo -> expressionAR . LESS expressionAR
    (31) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (32) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (34) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (36) expressionBo -> expressionAR . EQUALSTO expressionAR

    SEMICOLON       reduce using rule 7 (assignment -> ID EQUALS expressionAR .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MORE            shift and go to state 42
    LESS            shift and go to state 43
    MOREEQUAL       shift and go to state 44
    LESSEQUAL       shift and go to state 45
    NOTEQUAL        shift and go to state 46
    EQUALSTO        shift and go to state 47


state 64

    (8) assignment -> ID EQUALS expressionBo .
    (33) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (35) expressionBo -> expressionBo . EQUALSTO expressionBo

    SEMICOLON       reduce using rule 8 (assignment -> ID EQUALS expressionBo .)
    NOTEQUAL        shift and go to state 39
    EQUALSTO        shift and go to state 40


state 65

    (9) inst -> FOR expressionBo LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 86


state 66

    (33) expressionBo -> expressionBo NOTEQUAL expressionBo .
    (33) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (35) expressionBo -> expressionBo . EQUALSTO expressionBo

    LCURLBRACKET    reduce using rule 33 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    NOTEQUAL        reduce using rule 33 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    EQUALSTO        reduce using rule 33 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    RPAREN          reduce using rule 33 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    SEMICOLON       reduce using rule 33 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    COMMA           reduce using rule 33 (expressionBo -> expressionBo NOTEQUAL expressionBo .)

  ! NOTEQUAL        [ shift and go to state 39 ]
  ! EQUALSTO        [ shift and go to state 40 ]


state 67

    (35) expressionBo -> expressionBo EQUALSTO expressionBo .
    (33) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (35) expressionBo -> expressionBo . EQUALSTO expressionBo

    LCURLBRACKET    reduce using rule 35 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    NOTEQUAL        reduce using rule 35 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    EQUALSTO        reduce using rule 35 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    RPAREN          reduce using rule 35 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    SEMICOLON       reduce using rule 35 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    COMMA           reduce using rule 35 (expressionBo -> expressionBo EQUALSTO expressionBo .)

  ! NOTEQUAL        [ shift and go to state 39 ]
  ! EQUALSTO        [ shift and go to state 40 ]


state 68

    (10) inst -> FOR assignment SEMICOLON expressionBo . SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET
    (33) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (35) expressionBo -> expressionBo . EQUALSTO expressionBo

    SEMICOLON       shift and go to state 87
    NOTEQUAL        shift and go to state 39
    EQUALSTO        shift and go to state 40


state 69

    (29) expressionBo -> expressionAR MORE expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    LCURLBRACKET    reduce using rule 29 (expressionBo -> expressionAR MORE expressionAR .)
    NOTEQUAL        reduce using rule 29 (expressionBo -> expressionAR MORE expressionAR .)
    EQUALSTO        reduce using rule 29 (expressionBo -> expressionAR MORE expressionAR .)
    RPAREN          reduce using rule 29 (expressionBo -> expressionAR MORE expressionAR .)
    SEMICOLON       reduce using rule 29 (expressionBo -> expressionAR MORE expressionAR .)
    COMMA           reduce using rule 29 (expressionBo -> expressionAR MORE expressionAR .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51


state 70

    (30) expressionBo -> expressionAR LESS expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    LCURLBRACKET    reduce using rule 30 (expressionBo -> expressionAR LESS expressionAR .)
    NOTEQUAL        reduce using rule 30 (expressionBo -> expressionAR LESS expressionAR .)
    EQUALSTO        reduce using rule 30 (expressionBo -> expressionAR LESS expressionAR .)
    RPAREN          reduce using rule 30 (expressionBo -> expressionAR LESS expressionAR .)
    SEMICOLON       reduce using rule 30 (expressionBo -> expressionAR LESS expressionAR .)
    COMMA           reduce using rule 30 (expressionBo -> expressionAR LESS expressionAR .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51


state 71

    (31) expressionBo -> expressionAR MOREEQUAL expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    LCURLBRACKET    reduce using rule 31 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    NOTEQUAL        reduce using rule 31 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    EQUALSTO        reduce using rule 31 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    RPAREN          reduce using rule 31 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    SEMICOLON       reduce using rule 31 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    COMMA           reduce using rule 31 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51


state 72

    (32) expressionBo -> expressionAR LESSEQUAL expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    LCURLBRACKET    reduce using rule 32 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    NOTEQUAL        reduce using rule 32 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    EQUALSTO        reduce using rule 32 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    RPAREN          reduce using rule 32 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    SEMICOLON       reduce using rule 32 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    COMMA           reduce using rule 32 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51


state 73

    (34) expressionBo -> expressionAR NOTEQUAL expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    LCURLBRACKET    reduce using rule 34 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    NOTEQUAL        reduce using rule 34 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    EQUALSTO        reduce using rule 34 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    RPAREN          reduce using rule 34 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    SEMICOLON       reduce using rule 34 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    COMMA           reduce using rule 34 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51


state 74

    (36) expressionBo -> expressionAR EQUALSTO expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    LCURLBRACKET    reduce using rule 36 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    NOTEQUAL        reduce using rule 36 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    EQUALSTO        reduce using rule 36 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    RPAREN          reduce using rule 36 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    SEMICOLON       reduce using rule 36 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    COMMA           reduce using rule 36 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51


state 75

    (20) expressionAR -> expressionAR PLUS expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    LESS            reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    MOREEQUAL       reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    LESSEQUAL       reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    NOTEQUAL        reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    EQUALSTO        reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    PLUS            reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    MINUS           reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    RPAREN          reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    SEMICOLON       reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    LCURLBRACKET    reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    COMMA           reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51

  ! TIMES           [ reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .) ]
  ! DIVIDE          [ reduce using rule 20 (expressionAR -> expressionAR PLUS expressionAR .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]


state 76

    (21) expressionAR -> expressionAR MINUS expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    LESS            reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    MOREEQUAL       reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    LESSEQUAL       reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    NOTEQUAL        reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    EQUALSTO        reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    PLUS            reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    MINUS           reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    RPAREN          reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    SEMICOLON       reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    LCURLBRACKET    reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    COMMA           reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51

  ! TIMES           [ reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .) ]
  ! DIVIDE          [ reduce using rule 21 (expressionAR -> expressionAR MINUS expressionAR .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]


state 77

    (22) expressionAR -> expressionAR TIMES expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    LESS            reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    MOREEQUAL       reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    LESSEQUAL       reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    NOTEQUAL        reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    EQUALSTO        reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    PLUS            reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    MINUS           reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    TIMES           reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    DIVIDE          reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    RPAREN          reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    SEMICOLON       reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    LCURLBRACKET    reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)
    COMMA           reduce using rule 22 (expressionAR -> expressionAR TIMES expressionAR .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]


state 78

    (23) expressionAR -> expressionAR DIVIDE expressionAR .
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    LESS            reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    MOREEQUAL       reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    LESSEQUAL       reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    NOTEQUAL        reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    EQUALSTO        reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    PLUS            reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    MINUS           reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    TIMES           reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    DIVIDE          reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    RPAREN          reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    SEMICOLON       reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    LCURLBRACKET    reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)
    COMMA           reduce using rule 23 (expressionAR -> expressionAR DIVIDE expressionAR .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]


state 79

    (40) expressionBo -> LPAREN expressionBo RPAREN .

    LCURLBRACKET    reduce using rule 40 (expressionBo -> LPAREN expressionBo RPAREN .)
    NOTEQUAL        reduce using rule 40 (expressionBo -> LPAREN expressionBo RPAREN .)
    EQUALSTO        reduce using rule 40 (expressionBo -> LPAREN expressionBo RPAREN .)
    RPAREN          reduce using rule 40 (expressionBo -> LPAREN expressionBo RPAREN .)
    SEMICOLON       reduce using rule 40 (expressionBo -> LPAREN expressionBo RPAREN .)
    COMMA           reduce using rule 40 (expressionBo -> LPAREN expressionBo RPAREN .)


state 80

    (28) expressionAR -> LPAREN expressionAR RPAREN .

    MORE            reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    LESS            reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    MOREEQUAL       reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    LESSEQUAL       reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    NOTEQUAL        reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    EQUALSTO        reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    PLUS            reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    MINUS           reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    TIMES           reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    DIVIDE          reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    RPAREN          reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    SEMICOLON       reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    LCURLBRACKET    reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)
    COMMA           reduce using rule 28 (expressionAR -> LPAREN expressionAR RPAREN .)


state 81

    (28) expressionAR -> LPAREN expressionAR . RPAREN
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    RPAREN          shift and go to state 80
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51


state 82

    (12) inst -> IF expressionBo LCURLBRACKET list . RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> IF expressionBo LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 88


state 83

    (18) inst -> FMT POINT PRINT LPAREN . listID RPAREN SEMICOLON
    (14) listID -> . expressionAR
    (15) listID -> . expressionBo
    (16) listID -> . expressionBo COMMA listID
    (17) listID -> . expressionAR COMMA listID
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 62
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    listID                         shift and go to state 89
    expressionAR                   shift and go to state 90
    expressionBo                   shift and go to state 91

state 84

    (19) inst -> FMT POINT SCAN LPAREN . listID RPAREN SEMICOLON
    (14) listID -> . expressionAR
    (15) listID -> . expressionBo
    (16) listID -> . expressionBo COMMA listID
    (17) listID -> . expressionAR COMMA listID
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 62
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    listID                         shift and go to state 92
    expressionAR                   shift and go to state 90
    expressionBo                   shift and go to state 91

state 85

    (28) expressionAR -> LPAREN expressionAR . RPAREN
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR
    (29) expressionBo -> expressionAR . MORE expressionAR
    (30) expressionBo -> expressionAR . LESS expressionAR
    (31) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (32) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (34) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (36) expressionBo -> expressionAR . EQUALSTO expressionAR

    RPAREN          shift and go to state 80
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MORE            shift and go to state 42
    LESS            shift and go to state 43
    MOREEQUAL       shift and go to state 44
    LESSEQUAL       shift and go to state 45
    NOTEQUAL        shift and go to state 46
    EQUALSTO        shift and go to state 47


state 86

    (9) inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .

    FOR             reduce using rule 9 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 9 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 9 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 9 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 9 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)


state 87

    (10) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON . expressionAR LCURLBRACKET list RCURLBRACKET
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 56

    expressionAR                   shift and go to state 93

state 88

    (12) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET . ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .

    ELSE            shift and go to state 94
    FOR             reduce using rule 13 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 13 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 13 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 13 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 13 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)


state 89

    (18) inst -> FMT POINT PRINT LPAREN listID . RPAREN SEMICOLON

    RPAREN          shift and go to state 95


state 90

    (14) listID -> expressionAR .
    (17) listID -> expressionAR . COMMA listID
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR
    (29) expressionBo -> expressionAR . MORE expressionAR
    (30) expressionBo -> expressionAR . LESS expressionAR
    (31) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (32) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (34) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (36) expressionBo -> expressionAR . EQUALSTO expressionAR

    RPAREN          reduce using rule 14 (listID -> expressionAR .)
    COMMA           shift and go to state 96
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MORE            shift and go to state 42
    LESS            shift and go to state 43
    MOREEQUAL       shift and go to state 44
    LESSEQUAL       shift and go to state 45
    NOTEQUAL        shift and go to state 46
    EQUALSTO        shift and go to state 47


state 91

    (15) listID -> expressionBo .
    (16) listID -> expressionBo . COMMA listID
    (33) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (35) expressionBo -> expressionBo . EQUALSTO expressionBo

    RPAREN          reduce using rule 15 (listID -> expressionBo .)
    COMMA           shift and go to state 97
    NOTEQUAL        shift and go to state 39
    EQUALSTO        shift and go to state 40


state 92

    (19) inst -> FMT POINT SCAN LPAREN listID . RPAREN SEMICOLON

    RPAREN          shift and go to state 98


state 93

    (10) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR . LCURLBRACKET list RCURLBRACKET
    (20) expressionAR -> expressionAR . PLUS expressionAR
    (21) expressionAR -> expressionAR . MINUS expressionAR
    (22) expressionAR -> expressionAR . TIMES expressionAR
    (23) expressionAR -> expressionAR . DIVIDE expressionAR

    LCURLBRACKET    shift and go to state 99
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51


state 94

    (12) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE . LCURLBRACKET list RCURLBRACKET

    LCURLBRACKET    shift and go to state 100


state 95

    (18) inst -> FMT POINT PRINT LPAREN listID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 101


state 96

    (17) listID -> expressionAR COMMA . listID
    (14) listID -> . expressionAR
    (15) listID -> . expressionBo
    (16) listID -> . expressionBo COMMA listID
    (17) listID -> . expressionAR COMMA listID
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 62
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expressionAR                   shift and go to state 90
    listID                         shift and go to state 102
    expressionBo                   shift and go to state 91

state 97

    (16) listID -> expressionBo COMMA . listID
    (14) listID -> . expressionAR
    (15) listID -> . expressionBo
    (16) listID -> . expressionBo COMMA listID
    (17) listID -> . expressionAR COMMA listID
    (20) expressionAR -> . expressionAR PLUS expressionAR
    (21) expressionAR -> . expressionAR MINUS expressionAR
    (22) expressionAR -> . expressionAR TIMES expressionAR
    (23) expressionAR -> . expressionAR DIVIDE expressionAR
    (24) expressionAR -> . ID
    (25) expressionAR -> . INT
    (26) expressionAR -> . MINUS expressionAR
    (27) expressionAR -> . FLOAT
    (28) expressionAR -> . LPAREN expressionAR RPAREN
    (29) expressionBo -> . expressionAR MORE expressionAR
    (30) expressionBo -> . expressionAR LESS expressionAR
    (31) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (32) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (33) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (34) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (35) expressionBo -> . expressionBo EQUALSTO expressionBo
    (36) expressionBo -> . expressionAR EQUALSTO expressionAR
    (37) expressionBo -> . NOT expressionBo
    (38) expressionBo -> . TRUE
    (39) expressionBo -> . FALSE
    (40) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 34
    INT             shift and go to state 30
    MINUS           shift and go to state 29
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 62
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26

    expressionBo                   shift and go to state 91
    listID                         shift and go to state 103
    expressionAR                   shift and go to state 90

state 98

    (19) inst -> FMT POINT SCAN LPAREN listID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 104


state 99

    (10) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (9) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (10) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET
    (11) inst -> . assignment SEMICOLON
    (12) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (18) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (19) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo

    FOR             shift and go to state 14
    IF              shift and go to state 16
    FMT             shift and go to state 17
    ID              shift and go to state 18

    assignment                     shift and go to state 15
    list                           shift and go to state 105
    inst                           shift and go to state 13

state 100

    (12) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (9) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (10) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET
    (11) inst -> . assignment SEMICOLON
    (12) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (13) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (18) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (19) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo

    FOR             shift and go to state 14
    IF              shift and go to state 16
    FMT             shift and go to state 17
    ID              shift and go to state 18

    list                           shift and go to state 106
    inst                           shift and go to state 13
    assignment                     shift and go to state 15

state 101

    (18) inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .

    FOR             reduce using rule 18 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    IF              reduce using rule 18 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    FMT             reduce using rule 18 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    ID              reduce using rule 18 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    RCURLBRACKET    reduce using rule 18 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)


state 102

    (17) listID -> expressionAR COMMA listID .

    RPAREN          reduce using rule 17 (listID -> expressionAR COMMA listID .)


state 103

    (16) listID -> expressionBo COMMA listID .

    RPAREN          reduce using rule 16 (listID -> expressionBo COMMA listID .)


state 104

    (19) inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .

    FOR             reduce using rule 19 (inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .)
    IF              reduce using rule 19 (inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .)
    FMT             reduce using rule 19 (inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .)
    ID              reduce using rule 19 (inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .)
    RCURLBRACKET    reduce using rule 19 (inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .)


state 105

    (10) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 107


state 106

    (12) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 108


state 107

    (10) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET .

    FOR             reduce using rule 10 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 10 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 10 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 10 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 10 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET .)


state 108

    (12) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .

    FOR             reduce using rule 12 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 12 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 12 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 12 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 12 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)

