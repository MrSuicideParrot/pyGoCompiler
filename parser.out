Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    TYPE
    MAP
    INTERFACE
    CHAN
    GOTO
    FALLTHROUGH
    SWITCH
    RETURN
    CONST
    COMMENT
    VAR
    SELECT
    CASE
    STRUCT
    RANGE
    CONTINUE
    DEFER
    DEFAULT
    GO

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
Rule 2     statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET
Rule 3     list -> inst
Rule 4     list -> inst list
Rule 5     assignment -> ID ASSIGN expressionAR
Rule 6     assignment -> ID ASSIGN expressionBo
Rule 7     assignment -> ID EQUALS expressionAR
Rule 8     assignment -> ID EQUALS expressionBo
Rule 9     assignment -> ID INCREMENT
Rule 10    assignment -> ID DECREMENT
Rule 11    inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET
Rule 12    inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
Rule 13    inst -> assignment SEMICOLON
Rule 14    inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
Rule 15    inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET
Rule 16    listID -> expressionAR
Rule 17    listID -> expressionBo
Rule 18    listID -> expressionBo COMMA listID
Rule 19    listID -> expressionAR COMMA listID
Rule 20    IDlist -> ID
Rule 21    IDlist -> ID COMMA IDlist
Rule 22    inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
Rule 23    inst -> FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON
Rule 24    inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON
Rule 25    inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON
Rule 26    expressionAR -> expressionAR PLUS expressionAR
Rule 27    expressionAR -> expressionAR MINUS expressionAR
Rule 28    expressionAR -> expressionAR TIMES expressionAR
Rule 29    expressionAR -> expressionAR DIVIDE expressionAR
Rule 30    expressionAR -> ID
Rule 31    expressionAR -> INT
Rule 32    expressionAR -> MINUS expressionAR
Rule 33    expressionAR -> FLOAT
Rule 34    expressionAR -> LPAREN expressionAR RPAREN
Rule 35    expressionBo -> expressionAR MORE expressionAR
Rule 36    expressionBo -> expressionAR LESS expressionAR
Rule 37    expressionBo -> expressionAR MOREEQUAL expressionAR
Rule 38    expressionBo -> expressionAR LESSEQUAL expressionAR
Rule 39    expressionBo -> expressionBo NOTEQUAL expressionBo
Rule 40    expressionBo -> expressionAR NOTEQUAL expressionAR
Rule 41    expressionBo -> expressionBo EQUALSTO expressionBo
Rule 42    expressionBo -> expressionAR EQUALSTO expressionAR
Rule 43    expressionBo -> expressionBo AND expressionBo
Rule 44    expressionBo -> expressionBo OR expressionBo
Rule 45    expressionBo -> NOT expressionBo
Rule 46    expressionBo -> TRUE
Rule 47    expressionBo -> FALSE
Rule 48    expressionBo -> LPAREN expressionBo RPAREN

Terminals, with rules where they appear

AND                  : 43
ASSIGN               : 5 6
BREAK                : 
CASE                 : 
CHAN                 : 
COMMA                : 18 19 21
COMMENT              : 
CONST                : 
CONTINUE             : 
DECREMENT            : 10
DEFAULT              : 
DEFER                : 
DIVIDE               : 29
ELSE                 : 14
EQUALS               : 7 8
EQUALSTO             : 41 42
FALLTHROUGH          : 
FALSE                : 47
FLOAT                : 33
FMT                  : 22 23 24 25
FOR                  : 11 12
FUNC                 : 1 2
GO                   : 
GOTO                 : 
ID                   : 5 6 7 8 9 10 20 21 30
IF                   : 14 15
IMPORT               : 1 2
INCREMENT            : 9
INT                  : 31
INTERFACE            : 
LCURLBRACKET         : 1 2 11 12 14 14 15
LESS                 : 36
LESSEQUAL            : 38
LPAREN               : 1 2 22 23 24 25 34 48
MAIN                 : 1 1 2 2
MAP                  : 
MINUS                : 27 32
MORE                 : 35
MOREEQUAL            : 37
NOT                  : 45
NOTEQUAL             : 39 40
OR                   : 44
PACKAGE              : 1 2
PLUS                 : 26
POINT                : 22 23 24 25
PRINT                : 22 24
RANGE                : 
RCURLBRACKET         : 1 2 11 12 14 14 15
RETURN               : 
RPAREN               : 1 2 22 23 24 25 34 48
SCAN                 : 23 25
SELECT               : 
SEMICOLON            : 12 12 13 22 23 24 25
STRING               : 1 2
STRUCT               : 
SWITCH               : 
TIMES                : 28
TRUE                 : 46
TYPE                 : 
VAR                  : 
error                : 

Nonterminals, with rules where they appear

IDlist               : 21 23
assignment           : 12 12 13
expressionAR         : 5 7 16 19 26 26 27 27 28 28 29 29 32 34 35 35 36 36 37 37 38 38 40 40 42 42
expressionBo         : 6 8 11 12 14 15 17 18 39 39 41 41 43 43 44 44 45 48
inst                 : 3 4
list                 : 1 4 11 12 14 14 15
listID               : 18 19 22
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> . PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    PACKAGE         shift and go to state 1

    statement                      shift and go to state 2

state 1

    (1) statement -> PACKAGE . MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE . MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    MAIN            shift and go to state 3


state 2

    (0) S' -> statement .



state 3

    (1) statement -> PACKAGE MAIN . IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN . IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    IMPORT          shift and go to state 4


state 4

    (1) statement -> PACKAGE MAIN IMPORT . STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT . STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    STRING          shift and go to state 5


state 5

    (1) statement -> PACKAGE MAIN IMPORT STRING . FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING . FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    FUNC            shift and go to state 6


state 6

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC . MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC . MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    MAIN            shift and go to state 7


state 7

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN . LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN . LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    LPAREN          shift and go to state 8


state 8

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN . RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN . RPAREN LCURLBRACKET RCURLBRACKET

    RPAREN          shift and go to state 9


state 9

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN . LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN . LCURLBRACKET RCURLBRACKET

    LCURLBRACKET    shift and go to state 10


state 10

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET . list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET . RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (22) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON
    (24) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (25) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    RCURLBRACKET    shift and go to state 11
    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 13

    inst                           shift and go to state 14
    list                           shift and go to state 18
    assignment                     shift and go to state 16

state 11

    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET .

    $end            reduce using rule 2 (statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET .)


state 12

    (22) inst -> FMT . POINT PRINT LPAREN listID RPAREN SEMICOLON
    (23) inst -> FMT . POINT SCAN LPAREN IDlist RPAREN SEMICOLON
    (24) inst -> FMT . POINT PRINT LPAREN RPAREN SEMICOLON
    (25) inst -> FMT . POINT SCAN LPAREN RPAREN SEMICOLON

    POINT           shift and go to state 19


state 13

    (5) assignment -> ID . ASSIGN expressionAR
    (6) assignment -> ID . ASSIGN expressionBo
    (7) assignment -> ID . EQUALS expressionAR
    (8) assignment -> ID . EQUALS expressionBo
    (9) assignment -> ID . INCREMENT
    (10) assignment -> ID . DECREMENT

    ASSIGN          shift and go to state 20
    EQUALS          shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 23


state 14

    (3) list -> inst .
    (4) list -> inst . list
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (22) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON
    (24) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (25) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    RCURLBRACKET    reduce using rule 3 (list -> inst .)
    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 13

    inst                           shift and go to state 14
    list                           shift and go to state 24
    assignment                     shift and go to state 16

state 15

    (14) inst -> IF . expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> IF . expressionBo LCURLBRACKET list RCURLBRACKET
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 28
    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31

    expressionAR                   shift and go to state 25
    expressionBo                   shift and go to state 29

state 16

    (13) inst -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 35


state 17

    (11) inst -> FOR . expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> FOR . assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 28
    ID              shift and go to state 36
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31

    expressionAR                   shift and go to state 25
    expressionBo                   shift and go to state 37
    assignment                     shift and go to state 38

state 18

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 39


state 19

    (22) inst -> FMT POINT . PRINT LPAREN listID RPAREN SEMICOLON
    (23) inst -> FMT POINT . SCAN LPAREN IDlist RPAREN SEMICOLON
    (24) inst -> FMT POINT . PRINT LPAREN RPAREN SEMICOLON
    (25) inst -> FMT POINT . SCAN LPAREN RPAREN SEMICOLON

    PRINT           shift and go to state 41
    SCAN            shift and go to state 40


state 20

    (5) assignment -> ID ASSIGN . expressionAR
    (6) assignment -> ID ASSIGN . expressionBo
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 44
    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34

    expressionBo                   shift and go to state 43
    expressionAR                   shift and go to state 42

state 21

    (7) assignment -> ID EQUALS . expressionAR
    (8) assignment -> ID EQUALS . expressionBo
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 44
    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34

    expressionBo                   shift and go to state 46
    expressionAR                   shift and go to state 45

state 22

    (9) assignment -> ID INCREMENT .

    SEMICOLON       reduce using rule 9 (assignment -> ID INCREMENT .)
    LCURLBRACKET    reduce using rule 9 (assignment -> ID INCREMENT .)


state 23

    (10) assignment -> ID DECREMENT .

    SEMICOLON       reduce using rule 10 (assignment -> ID DECREMENT .)
    LCURLBRACKET    reduce using rule 10 (assignment -> ID DECREMENT .)


state 24

    (4) list -> inst list .

    RCURLBRACKET    reduce using rule 4 (list -> inst list .)


state 25

    (35) expressionBo -> expressionAR . MORE expressionAR
    (36) expressionBo -> expressionAR . LESS expressionAR
    (37) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (38) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (40) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (42) expressionBo -> expressionAR . EQUALSTO expressionAR
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            shift and go to state 56
    LESS            shift and go to state 47
    MOREEQUAL       shift and go to state 51
    LESSEQUAL       shift and go to state 52
    NOTEQUAL        shift and go to state 53
    EQUALSTO        shift and go to state 50
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48


state 26

    (46) expressionBo -> TRUE .

    NOTEQUAL        reduce using rule 46 (expressionBo -> TRUE .)
    EQUALSTO        reduce using rule 46 (expressionBo -> TRUE .)
    AND             reduce using rule 46 (expressionBo -> TRUE .)
    OR              reduce using rule 46 (expressionBo -> TRUE .)
    LCURLBRACKET    reduce using rule 46 (expressionBo -> TRUE .)
    SEMICOLON       reduce using rule 46 (expressionBo -> TRUE .)
    RPAREN          reduce using rule 46 (expressionBo -> TRUE .)
    COMMA           reduce using rule 46 (expressionBo -> TRUE .)


state 27

    (30) expressionAR -> ID .

    PLUS            reduce using rule 30 (expressionAR -> ID .)
    MINUS           reduce using rule 30 (expressionAR -> ID .)
    TIMES           reduce using rule 30 (expressionAR -> ID .)
    DIVIDE          reduce using rule 30 (expressionAR -> ID .)
    MORE            reduce using rule 30 (expressionAR -> ID .)
    LESS            reduce using rule 30 (expressionAR -> ID .)
    MOREEQUAL       reduce using rule 30 (expressionAR -> ID .)
    LESSEQUAL       reduce using rule 30 (expressionAR -> ID .)
    NOTEQUAL        reduce using rule 30 (expressionAR -> ID .)
    EQUALSTO        reduce using rule 30 (expressionAR -> ID .)
    SEMICOLON       reduce using rule 30 (expressionAR -> ID .)
    LCURLBRACKET    reduce using rule 30 (expressionAR -> ID .)
    RPAREN          reduce using rule 30 (expressionAR -> ID .)
    AND             reduce using rule 30 (expressionAR -> ID .)
    OR              reduce using rule 30 (expressionAR -> ID .)
    COMMA           reduce using rule 30 (expressionAR -> ID .)


state 28

    (48) expressionBo -> LPAREN . expressionBo RPAREN
    (34) expressionAR -> LPAREN . expressionAR RPAREN
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 28
    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31

    expressionAR                   shift and go to state 57
    expressionBo                   shift and go to state 58

state 29

    (14) inst -> IF expressionBo . LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> IF expressionBo . LCURLBRACKET list RCURLBRACKET
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    LCURLBRACKET    shift and go to state 62
    NOTEQUAL        shift and go to state 61
    EQUALSTO        shift and go to state 60
    AND             shift and go to state 63
    OR              shift and go to state 59


state 30

    (32) expressionAR -> MINUS . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 64

state 31

    (33) expressionAR -> FLOAT .

    PLUS            reduce using rule 33 (expressionAR -> FLOAT .)
    MINUS           reduce using rule 33 (expressionAR -> FLOAT .)
    TIMES           reduce using rule 33 (expressionAR -> FLOAT .)
    DIVIDE          reduce using rule 33 (expressionAR -> FLOAT .)
    MORE            reduce using rule 33 (expressionAR -> FLOAT .)
    LESS            reduce using rule 33 (expressionAR -> FLOAT .)
    MOREEQUAL       reduce using rule 33 (expressionAR -> FLOAT .)
    LESSEQUAL       reduce using rule 33 (expressionAR -> FLOAT .)
    NOTEQUAL        reduce using rule 33 (expressionAR -> FLOAT .)
    EQUALSTO        reduce using rule 33 (expressionAR -> FLOAT .)
    SEMICOLON       reduce using rule 33 (expressionAR -> FLOAT .)
    LCURLBRACKET    reduce using rule 33 (expressionAR -> FLOAT .)
    RPAREN          reduce using rule 33 (expressionAR -> FLOAT .)
    AND             reduce using rule 33 (expressionAR -> FLOAT .)
    OR              reduce using rule 33 (expressionAR -> FLOAT .)
    COMMA           reduce using rule 33 (expressionAR -> FLOAT .)


state 32

    (45) expressionBo -> NOT . expressionBo
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 28
    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31

    expressionAR                   shift and go to state 25
    expressionBo                   shift and go to state 66

state 33

    (31) expressionAR -> INT .

    PLUS            reduce using rule 31 (expressionAR -> INT .)
    MINUS           reduce using rule 31 (expressionAR -> INT .)
    TIMES           reduce using rule 31 (expressionAR -> INT .)
    DIVIDE          reduce using rule 31 (expressionAR -> INT .)
    MORE            reduce using rule 31 (expressionAR -> INT .)
    LESS            reduce using rule 31 (expressionAR -> INT .)
    MOREEQUAL       reduce using rule 31 (expressionAR -> INT .)
    LESSEQUAL       reduce using rule 31 (expressionAR -> INT .)
    NOTEQUAL        reduce using rule 31 (expressionAR -> INT .)
    EQUALSTO        reduce using rule 31 (expressionAR -> INT .)
    SEMICOLON       reduce using rule 31 (expressionAR -> INT .)
    LCURLBRACKET    reduce using rule 31 (expressionAR -> INT .)
    RPAREN          reduce using rule 31 (expressionAR -> INT .)
    AND             reduce using rule 31 (expressionAR -> INT .)
    OR              reduce using rule 31 (expressionAR -> INT .)
    COMMA           reduce using rule 31 (expressionAR -> INT .)


state 34

    (47) expressionBo -> FALSE .

    NOTEQUAL        reduce using rule 47 (expressionBo -> FALSE .)
    EQUALSTO        reduce using rule 47 (expressionBo -> FALSE .)
    AND             reduce using rule 47 (expressionBo -> FALSE .)
    OR              reduce using rule 47 (expressionBo -> FALSE .)
    LCURLBRACKET    reduce using rule 47 (expressionBo -> FALSE .)
    SEMICOLON       reduce using rule 47 (expressionBo -> FALSE .)
    RPAREN          reduce using rule 47 (expressionBo -> FALSE .)
    COMMA           reduce using rule 47 (expressionBo -> FALSE .)


state 35

    (13) inst -> assignment SEMICOLON .

    FOR             reduce using rule 13 (inst -> assignment SEMICOLON .)
    IF              reduce using rule 13 (inst -> assignment SEMICOLON .)
    FMT             reduce using rule 13 (inst -> assignment SEMICOLON .)
    ID              reduce using rule 13 (inst -> assignment SEMICOLON .)
    RCURLBRACKET    reduce using rule 13 (inst -> assignment SEMICOLON .)


state 36

    (5) assignment -> ID . ASSIGN expressionAR
    (6) assignment -> ID . ASSIGN expressionBo
    (7) assignment -> ID . EQUALS expressionAR
    (8) assignment -> ID . EQUALS expressionBo
    (9) assignment -> ID . INCREMENT
    (10) assignment -> ID . DECREMENT
    (30) expressionAR -> ID .

    ASSIGN          shift and go to state 20
    EQUALS          shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 23
    MORE            reduce using rule 30 (expressionAR -> ID .)
    LESS            reduce using rule 30 (expressionAR -> ID .)
    MOREEQUAL       reduce using rule 30 (expressionAR -> ID .)
    LESSEQUAL       reduce using rule 30 (expressionAR -> ID .)
    NOTEQUAL        reduce using rule 30 (expressionAR -> ID .)
    EQUALSTO        reduce using rule 30 (expressionAR -> ID .)
    PLUS            reduce using rule 30 (expressionAR -> ID .)
    MINUS           reduce using rule 30 (expressionAR -> ID .)
    TIMES           reduce using rule 30 (expressionAR -> ID .)
    DIVIDE          reduce using rule 30 (expressionAR -> ID .)


state 37

    (11) inst -> FOR expressionBo . LCURLBRACKET list RCURLBRACKET
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    LCURLBRACKET    shift and go to state 67
    NOTEQUAL        shift and go to state 61
    EQUALSTO        shift and go to state 60
    AND             shift and go to state 63
    OR              shift and go to state 59


state 38

    (12) inst -> FOR assignment . SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET

    SEMICOLON       shift and go to state 68


state 39

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET .

    $end            reduce using rule 1 (statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET .)


state 40

    (23) inst -> FMT POINT SCAN . LPAREN IDlist RPAREN SEMICOLON
    (25) inst -> FMT POINT SCAN . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 69


state 41

    (22) inst -> FMT POINT PRINT . LPAREN listID RPAREN SEMICOLON
    (24) inst -> FMT POINT PRINT . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 70


state 42

    (5) assignment -> ID ASSIGN expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR
    (35) expressionBo -> expressionAR . MORE expressionAR
    (36) expressionBo -> expressionAR . LESS expressionAR
    (37) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (38) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (40) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (42) expressionBo -> expressionAR . EQUALSTO expressionAR

    SEMICOLON       reduce using rule 5 (assignment -> ID ASSIGN expressionAR .)
    LCURLBRACKET    reduce using rule 5 (assignment -> ID ASSIGN expressionAR .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48
    MORE            shift and go to state 56
    LESS            shift and go to state 47
    MOREEQUAL       shift and go to state 51
    LESSEQUAL       shift and go to state 52
    NOTEQUAL        shift and go to state 53
    EQUALSTO        shift and go to state 50


state 43

    (6) assignment -> ID ASSIGN expressionBo .
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    SEMICOLON       reduce using rule 6 (assignment -> ID ASSIGN expressionBo .)
    LCURLBRACKET    reduce using rule 6 (assignment -> ID ASSIGN expressionBo .)
    NOTEQUAL        shift and go to state 61
    EQUALSTO        shift and go to state 60
    AND             shift and go to state 63
    OR              shift and go to state 59


state 44

    (34) expressionAR -> LPAREN . expressionAR RPAREN
    (48) expressionBo -> LPAREN . expressionBo RPAREN
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 44
    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34

    expressionBo                   shift and go to state 58
    expressionAR                   shift and go to state 71

state 45

    (7) assignment -> ID EQUALS expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR
    (35) expressionBo -> expressionAR . MORE expressionAR
    (36) expressionBo -> expressionAR . LESS expressionAR
    (37) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (38) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (40) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (42) expressionBo -> expressionAR . EQUALSTO expressionAR

    SEMICOLON       reduce using rule 7 (assignment -> ID EQUALS expressionAR .)
    LCURLBRACKET    reduce using rule 7 (assignment -> ID EQUALS expressionAR .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48
    MORE            shift and go to state 56
    LESS            shift and go to state 47
    MOREEQUAL       shift and go to state 51
    LESSEQUAL       shift and go to state 52
    NOTEQUAL        shift and go to state 53
    EQUALSTO        shift and go to state 50


state 46

    (8) assignment -> ID EQUALS expressionBo .
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    SEMICOLON       reduce using rule 8 (assignment -> ID EQUALS expressionBo .)
    LCURLBRACKET    reduce using rule 8 (assignment -> ID EQUALS expressionBo .)
    NOTEQUAL        shift and go to state 61
    EQUALSTO        shift and go to state 60
    AND             shift and go to state 63
    OR              shift and go to state 59


state 47

    (36) expressionBo -> expressionAR LESS . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 72

state 48

    (29) expressionAR -> expressionAR DIVIDE . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 73

state 49

    (28) expressionAR -> expressionAR TIMES . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 74

state 50

    (42) expressionBo -> expressionAR EQUALSTO . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 75

state 51

    (37) expressionBo -> expressionAR MOREEQUAL . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 76

state 52

    (38) expressionBo -> expressionAR LESSEQUAL . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 77

state 53

    (40) expressionBo -> expressionAR NOTEQUAL . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 78

state 54

    (26) expressionAR -> expressionAR PLUS . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 79

state 55

    (27) expressionAR -> expressionAR MINUS . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 80

state 56

    (35) expressionBo -> expressionAR MORE . expressionAR
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 81

state 57

    (34) expressionAR -> LPAREN expressionAR . RPAREN
    (35) expressionBo -> expressionAR . MORE expressionAR
    (36) expressionBo -> expressionAR . LESS expressionAR
    (37) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (38) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (40) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (42) expressionBo -> expressionAR . EQUALSTO expressionAR
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    RPAREN          shift and go to state 82
    MORE            shift and go to state 56
    LESS            shift and go to state 47
    MOREEQUAL       shift and go to state 51
    LESSEQUAL       shift and go to state 52
    NOTEQUAL        shift and go to state 53
    EQUALSTO        shift and go to state 50
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48


state 58

    (48) expressionBo -> LPAREN expressionBo . RPAREN
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    RPAREN          shift and go to state 83
    NOTEQUAL        shift and go to state 61
    EQUALSTO        shift and go to state 60
    AND             shift and go to state 63
    OR              shift and go to state 59


state 59

    (44) expressionBo -> expressionBo OR . expressionBo
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 28
    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31

    expressionAR                   shift and go to state 25
    expressionBo                   shift and go to state 84

state 60

    (41) expressionBo -> expressionBo EQUALSTO . expressionBo
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 28
    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31

    expressionAR                   shift and go to state 25
    expressionBo                   shift and go to state 85

state 61

    (39) expressionBo -> expressionBo NOTEQUAL . expressionBo
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 28
    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31

    expressionAR                   shift and go to state 25
    expressionBo                   shift and go to state 86

state 62

    (14) inst -> IF expressionBo LCURLBRACKET . list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> IF expressionBo LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (22) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON
    (24) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (25) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 13

    list                           shift and go to state 87
    inst                           shift and go to state 14
    assignment                     shift and go to state 16

state 63

    (43) expressionBo -> expressionBo AND . expressionBo
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 28
    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31

    expressionAR                   shift and go to state 25
    expressionBo                   shift and go to state 88

state 64

    (32) expressionAR -> MINUS expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    PLUS            reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    MINUS           reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    TIMES           reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    DIVIDE          reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    MORE            reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    LESS            reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    MOREEQUAL       reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    LESSEQUAL       reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    NOTEQUAL        reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    EQUALSTO        reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    SEMICOLON       reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    LCURLBRACKET    reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    RPAREN          reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    AND             reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    OR              reduce using rule 32 (expressionAR -> MINUS expressionAR .)
    COMMA           reduce using rule 32 (expressionAR -> MINUS expressionAR .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 48 ]


state 65

    (34) expressionAR -> LPAREN . expressionAR RPAREN
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 65

    expressionAR                   shift and go to state 89

state 66

    (45) expressionBo -> NOT expressionBo .
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    NOTEQUAL        reduce using rule 45 (expressionBo -> NOT expressionBo .)
    EQUALSTO        reduce using rule 45 (expressionBo -> NOT expressionBo .)
    AND             reduce using rule 45 (expressionBo -> NOT expressionBo .)
    OR              reduce using rule 45 (expressionBo -> NOT expressionBo .)
    LCURLBRACKET    reduce using rule 45 (expressionBo -> NOT expressionBo .)
    SEMICOLON       reduce using rule 45 (expressionBo -> NOT expressionBo .)
    RPAREN          reduce using rule 45 (expressionBo -> NOT expressionBo .)
    COMMA           reduce using rule 45 (expressionBo -> NOT expressionBo .)

  ! NOTEQUAL        [ shift and go to state 61 ]
  ! EQUALSTO        [ shift and go to state 60 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 59 ]


state 67

    (11) inst -> FOR expressionBo LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (22) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON
    (24) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (25) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 13

    list                           shift and go to state 90
    inst                           shift and go to state 14
    assignment                     shift and go to state 16

state 68

    (12) inst -> FOR assignment SEMICOLON . expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 28
    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31

    expressionAR                   shift and go to state 25
    expressionBo                   shift and go to state 91

state 69

    (23) inst -> FMT POINT SCAN LPAREN . IDlist RPAREN SEMICOLON
    (25) inst -> FMT POINT SCAN LPAREN . RPAREN SEMICOLON
    (20) IDlist -> . ID
    (21) IDlist -> . ID COMMA IDlist

    RPAREN          shift and go to state 93
    ID              shift and go to state 92

    IDlist                         shift and go to state 94

state 70

    (22) inst -> FMT POINT PRINT LPAREN . listID RPAREN SEMICOLON
    (24) inst -> FMT POINT PRINT LPAREN . RPAREN SEMICOLON
    (16) listID -> . expressionAR
    (17) listID -> . expressionBo
    (18) listID -> . expressionBo COMMA listID
    (19) listID -> . expressionAR COMMA listID
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN

    RPAREN          shift and go to state 98
    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 44
    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34

    expressionBo                   shift and go to state 96
    listID                         shift and go to state 97
    expressionAR                   shift and go to state 95

state 71

    (34) expressionAR -> LPAREN expressionAR . RPAREN
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR
    (35) expressionBo -> expressionAR . MORE expressionAR
    (36) expressionBo -> expressionAR . LESS expressionAR
    (37) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (38) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (40) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (42) expressionBo -> expressionAR . EQUALSTO expressionAR

    RPAREN          shift and go to state 82
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48
    MORE            shift and go to state 56
    LESS            shift and go to state 47
    MOREEQUAL       shift and go to state 51
    LESSEQUAL       shift and go to state 52
    NOTEQUAL        shift and go to state 53
    EQUALSTO        shift and go to state 50


state 72

    (36) expressionBo -> expressionAR LESS expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 36 (expressionBo -> expressionAR LESS expressionAR .)
    EQUALSTO        reduce using rule 36 (expressionBo -> expressionAR LESS expressionAR .)
    AND             reduce using rule 36 (expressionBo -> expressionAR LESS expressionAR .)
    OR              reduce using rule 36 (expressionBo -> expressionAR LESS expressionAR .)
    LCURLBRACKET    reduce using rule 36 (expressionBo -> expressionAR LESS expressionAR .)
    SEMICOLON       reduce using rule 36 (expressionBo -> expressionAR LESS expressionAR .)
    RPAREN          reduce using rule 36 (expressionBo -> expressionAR LESS expressionAR .)
    COMMA           reduce using rule 36 (expressionBo -> expressionAR LESS expressionAR .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48


state 73

    (29) expressionAR -> expressionAR DIVIDE expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    PLUS            reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    MINUS           reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    TIMES           reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    DIVIDE          reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    MORE            reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    LESS            reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    MOREEQUAL       reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    LESSEQUAL       reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    NOTEQUAL        reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    EQUALSTO        reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    SEMICOLON       reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    LCURLBRACKET    reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    RPAREN          reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    AND             reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    OR              reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)
    COMMA           reduce using rule 29 (expressionAR -> expressionAR DIVIDE expressionAR .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 48 ]


state 74

    (28) expressionAR -> expressionAR TIMES expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    PLUS            reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    MINUS           reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    TIMES           reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    DIVIDE          reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    MORE            reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    LESS            reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    MOREEQUAL       reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    LESSEQUAL       reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    NOTEQUAL        reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    EQUALSTO        reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    SEMICOLON       reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    LCURLBRACKET    reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    RPAREN          reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    AND             reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    OR              reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)
    COMMA           reduce using rule 28 (expressionAR -> expressionAR TIMES expressionAR .)

  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]
  ! TIMES           [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 48 ]


state 75

    (42) expressionBo -> expressionAR EQUALSTO expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 42 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    EQUALSTO        reduce using rule 42 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    AND             reduce using rule 42 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    OR              reduce using rule 42 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    LCURLBRACKET    reduce using rule 42 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    SEMICOLON       reduce using rule 42 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    RPAREN          reduce using rule 42 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    COMMA           reduce using rule 42 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48


state 76

    (37) expressionBo -> expressionAR MOREEQUAL expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 37 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    EQUALSTO        reduce using rule 37 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    AND             reduce using rule 37 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    OR              reduce using rule 37 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    LCURLBRACKET    reduce using rule 37 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    SEMICOLON       reduce using rule 37 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    RPAREN          reduce using rule 37 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    COMMA           reduce using rule 37 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48


state 77

    (38) expressionBo -> expressionAR LESSEQUAL expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 38 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    EQUALSTO        reduce using rule 38 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    AND             reduce using rule 38 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    OR              reduce using rule 38 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    LCURLBRACKET    reduce using rule 38 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    SEMICOLON       reduce using rule 38 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    RPAREN          reduce using rule 38 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    COMMA           reduce using rule 38 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48


state 78

    (40) expressionBo -> expressionAR NOTEQUAL expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 40 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    EQUALSTO        reduce using rule 40 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    AND             reduce using rule 40 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    OR              reduce using rule 40 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    LCURLBRACKET    reduce using rule 40 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    SEMICOLON       reduce using rule 40 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    RPAREN          reduce using rule 40 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    COMMA           reduce using rule 40 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48


state 79

    (26) expressionAR -> expressionAR PLUS expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    PLUS            reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    MINUS           reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    MORE            reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    LESS            reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    MOREEQUAL       reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    LESSEQUAL       reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    NOTEQUAL        reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    EQUALSTO        reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    SEMICOLON       reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    LCURLBRACKET    reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    RPAREN          reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    AND             reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    OR              reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    COMMA           reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .)
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48

  ! TIMES           [ reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .) ]
  ! DIVIDE          [ reduce using rule 26 (expressionAR -> expressionAR PLUS expressionAR .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]


state 80

    (27) expressionAR -> expressionAR MINUS expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    PLUS            reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    MINUS           reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    MORE            reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    LESS            reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    MOREEQUAL       reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    LESSEQUAL       reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    NOTEQUAL        reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    EQUALSTO        reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    SEMICOLON       reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    LCURLBRACKET    reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    RPAREN          reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    AND             reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    OR              reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    COMMA           reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .)
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48

  ! TIMES           [ reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .) ]
  ! DIVIDE          [ reduce using rule 27 (expressionAR -> expressionAR MINUS expressionAR .) ]
  ! PLUS            [ shift and go to state 54 ]
  ! MINUS           [ shift and go to state 55 ]


state 81

    (35) expressionBo -> expressionAR MORE expressionAR .
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 35 (expressionBo -> expressionAR MORE expressionAR .)
    EQUALSTO        reduce using rule 35 (expressionBo -> expressionAR MORE expressionAR .)
    AND             reduce using rule 35 (expressionBo -> expressionAR MORE expressionAR .)
    OR              reduce using rule 35 (expressionBo -> expressionAR MORE expressionAR .)
    LCURLBRACKET    reduce using rule 35 (expressionBo -> expressionAR MORE expressionAR .)
    SEMICOLON       reduce using rule 35 (expressionBo -> expressionAR MORE expressionAR .)
    RPAREN          reduce using rule 35 (expressionBo -> expressionAR MORE expressionAR .)
    COMMA           reduce using rule 35 (expressionBo -> expressionAR MORE expressionAR .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48


state 82

    (34) expressionAR -> LPAREN expressionAR RPAREN .

    PLUS            reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    MINUS           reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    TIMES           reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    DIVIDE          reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    MORE            reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    LESS            reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    MOREEQUAL       reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    LESSEQUAL       reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    NOTEQUAL        reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    EQUALSTO        reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    SEMICOLON       reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    LCURLBRACKET    reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    RPAREN          reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    AND             reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    OR              reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)
    COMMA           reduce using rule 34 (expressionAR -> LPAREN expressionAR RPAREN .)


state 83

    (48) expressionBo -> LPAREN expressionBo RPAREN .

    NOTEQUAL        reduce using rule 48 (expressionBo -> LPAREN expressionBo RPAREN .)
    EQUALSTO        reduce using rule 48 (expressionBo -> LPAREN expressionBo RPAREN .)
    AND             reduce using rule 48 (expressionBo -> LPAREN expressionBo RPAREN .)
    OR              reduce using rule 48 (expressionBo -> LPAREN expressionBo RPAREN .)
    LCURLBRACKET    reduce using rule 48 (expressionBo -> LPAREN expressionBo RPAREN .)
    SEMICOLON       reduce using rule 48 (expressionBo -> LPAREN expressionBo RPAREN .)
    RPAREN          reduce using rule 48 (expressionBo -> LPAREN expressionBo RPAREN .)
    COMMA           reduce using rule 48 (expressionBo -> LPAREN expressionBo RPAREN .)


state 84

    (44) expressionBo -> expressionBo OR expressionBo .
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    NOTEQUAL        reduce using rule 44 (expressionBo -> expressionBo OR expressionBo .)
    EQUALSTO        reduce using rule 44 (expressionBo -> expressionBo OR expressionBo .)
    AND             reduce using rule 44 (expressionBo -> expressionBo OR expressionBo .)
    OR              reduce using rule 44 (expressionBo -> expressionBo OR expressionBo .)
    LCURLBRACKET    reduce using rule 44 (expressionBo -> expressionBo OR expressionBo .)
    SEMICOLON       reduce using rule 44 (expressionBo -> expressionBo OR expressionBo .)
    RPAREN          reduce using rule 44 (expressionBo -> expressionBo OR expressionBo .)
    COMMA           reduce using rule 44 (expressionBo -> expressionBo OR expressionBo .)

  ! NOTEQUAL        [ shift and go to state 61 ]
  ! EQUALSTO        [ shift and go to state 60 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 59 ]


state 85

    (41) expressionBo -> expressionBo EQUALSTO expressionBo .
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    NOTEQUAL        reduce using rule 41 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    EQUALSTO        reduce using rule 41 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    LCURLBRACKET    reduce using rule 41 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    SEMICOLON       reduce using rule 41 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    RPAREN          reduce using rule 41 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    COMMA           reduce using rule 41 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    AND             shift and go to state 63
    OR              shift and go to state 59

  ! AND             [ reduce using rule 41 (expressionBo -> expressionBo EQUALSTO expressionBo .) ]
  ! OR              [ reduce using rule 41 (expressionBo -> expressionBo EQUALSTO expressionBo .) ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! EQUALSTO        [ shift and go to state 60 ]


state 86

    (39) expressionBo -> expressionBo NOTEQUAL expressionBo .
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    NOTEQUAL        reduce using rule 39 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    EQUALSTO        reduce using rule 39 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    LCURLBRACKET    reduce using rule 39 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    SEMICOLON       reduce using rule 39 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    RPAREN          reduce using rule 39 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    COMMA           reduce using rule 39 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    AND             shift and go to state 63
    OR              shift and go to state 59

  ! AND             [ reduce using rule 39 (expressionBo -> expressionBo NOTEQUAL expressionBo .) ]
  ! OR              [ reduce using rule 39 (expressionBo -> expressionBo NOTEQUAL expressionBo .) ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! EQUALSTO        [ shift and go to state 60 ]


state 87

    (14) inst -> IF expressionBo LCURLBRACKET list . RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> IF expressionBo LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 99


state 88

    (43) expressionBo -> expressionBo AND expressionBo .
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    NOTEQUAL        reduce using rule 43 (expressionBo -> expressionBo AND expressionBo .)
    EQUALSTO        reduce using rule 43 (expressionBo -> expressionBo AND expressionBo .)
    AND             reduce using rule 43 (expressionBo -> expressionBo AND expressionBo .)
    OR              reduce using rule 43 (expressionBo -> expressionBo AND expressionBo .)
    LCURLBRACKET    reduce using rule 43 (expressionBo -> expressionBo AND expressionBo .)
    SEMICOLON       reduce using rule 43 (expressionBo -> expressionBo AND expressionBo .)
    RPAREN          reduce using rule 43 (expressionBo -> expressionBo AND expressionBo .)
    COMMA           reduce using rule 43 (expressionBo -> expressionBo AND expressionBo .)

  ! NOTEQUAL        [ shift and go to state 61 ]
  ! EQUALSTO        [ shift and go to state 60 ]
  ! AND             [ shift and go to state 63 ]
  ! OR              [ shift and go to state 59 ]


state 89

    (34) expressionAR -> LPAREN expressionAR . RPAREN
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR

    RPAREN          shift and go to state 82
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48


state 90

    (11) inst -> FOR expressionBo LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 100


state 91

    (12) inst -> FOR assignment SEMICOLON expressionBo . SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    SEMICOLON       shift and go to state 101
    NOTEQUAL        shift and go to state 61
    EQUALSTO        shift and go to state 60
    AND             shift and go to state 63
    OR              shift and go to state 59


state 92

    (20) IDlist -> ID .
    (21) IDlist -> ID . COMMA IDlist

    RPAREN          reduce using rule 20 (IDlist -> ID .)
    COMMA           shift and go to state 102


state 93

    (25) inst -> FMT POINT SCAN LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 103


state 94

    (23) inst -> FMT POINT SCAN LPAREN IDlist . RPAREN SEMICOLON

    RPAREN          shift and go to state 104


state 95

    (16) listID -> expressionAR .
    (19) listID -> expressionAR . COMMA listID
    (26) expressionAR -> expressionAR . PLUS expressionAR
    (27) expressionAR -> expressionAR . MINUS expressionAR
    (28) expressionAR -> expressionAR . TIMES expressionAR
    (29) expressionAR -> expressionAR . DIVIDE expressionAR
    (35) expressionBo -> expressionAR . MORE expressionAR
    (36) expressionBo -> expressionAR . LESS expressionAR
    (37) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (38) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (40) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (42) expressionBo -> expressionAR . EQUALSTO expressionAR

    RPAREN          reduce using rule 16 (listID -> expressionAR .)
    COMMA           shift and go to state 105
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 49
    DIVIDE          shift and go to state 48
    MORE            shift and go to state 56
    LESS            shift and go to state 47
    MOREEQUAL       shift and go to state 51
    LESSEQUAL       shift and go to state 52
    NOTEQUAL        shift and go to state 53
    EQUALSTO        shift and go to state 50


state 96

    (17) listID -> expressionBo .
    (18) listID -> expressionBo . COMMA listID
    (39) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (41) expressionBo -> expressionBo . EQUALSTO expressionBo
    (43) expressionBo -> expressionBo . AND expressionBo
    (44) expressionBo -> expressionBo . OR expressionBo

    RPAREN          reduce using rule 17 (listID -> expressionBo .)
    COMMA           shift and go to state 106
    NOTEQUAL        shift and go to state 61
    EQUALSTO        shift and go to state 60
    AND             shift and go to state 63
    OR              shift and go to state 59


state 97

    (22) inst -> FMT POINT PRINT LPAREN listID . RPAREN SEMICOLON

    RPAREN          shift and go to state 107


state 98

    (24) inst -> FMT POINT PRINT LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 108


state 99

    (14) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET . ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .

    ELSE            shift and go to state 109
    FOR             reduce using rule 15 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 15 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 15 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 15 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 15 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)


state 100

    (11) inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .

    FOR             reduce using rule 11 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 11 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 11 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 11 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 11 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)


state 101

    (12) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON . assignment LCURLBRACKET list RCURLBRACKET
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    ID              shift and go to state 13

    assignment                     shift and go to state 110

state 102

    (21) IDlist -> ID COMMA . IDlist
    (20) IDlist -> . ID
    (21) IDlist -> . ID COMMA IDlist

    ID              shift and go to state 92

    IDlist                         shift and go to state 111

state 103

    (25) inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .

    FOR             reduce using rule 25 (inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 25 (inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .)
    FMT             reduce using rule 25 (inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 25 (inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .)
    RCURLBRACKET    reduce using rule 25 (inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .)


state 104

    (23) inst -> FMT POINT SCAN LPAREN IDlist RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 112


state 105

    (19) listID -> expressionAR COMMA . listID
    (16) listID -> . expressionAR
    (17) listID -> . expressionBo
    (18) listID -> . expressionBo COMMA listID
    (19) listID -> . expressionAR COMMA listID
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 44
    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34

    expressionBo                   shift and go to state 96
    listID                         shift and go to state 113
    expressionAR                   shift and go to state 95

state 106

    (18) listID -> expressionBo COMMA . listID
    (16) listID -> . expressionAR
    (17) listID -> . expressionBo
    (18) listID -> . expressionBo COMMA listID
    (19) listID -> . expressionAR COMMA listID
    (26) expressionAR -> . expressionAR PLUS expressionAR
    (27) expressionAR -> . expressionAR MINUS expressionAR
    (28) expressionAR -> . expressionAR TIMES expressionAR
    (29) expressionAR -> . expressionAR DIVIDE expressionAR
    (30) expressionAR -> . ID
    (31) expressionAR -> . INT
    (32) expressionAR -> . MINUS expressionAR
    (33) expressionAR -> . FLOAT
    (34) expressionAR -> . LPAREN expressionAR RPAREN
    (35) expressionBo -> . expressionAR MORE expressionAR
    (36) expressionBo -> . expressionAR LESS expressionAR
    (37) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (38) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (39) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (40) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (41) expressionBo -> . expressionBo EQUALSTO expressionBo
    (42) expressionBo -> . expressionAR EQUALSTO expressionAR
    (43) expressionBo -> . expressionBo AND expressionBo
    (44) expressionBo -> . expressionBo OR expressionBo
    (45) expressionBo -> . NOT expressionBo
    (46) expressionBo -> . TRUE
    (47) expressionBo -> . FALSE
    (48) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 27
    INT             shift and go to state 33
    MINUS           shift and go to state 30
    FLOAT           shift and go to state 31
    LPAREN          shift and go to state 44
    NOT             shift and go to state 32
    TRUE            shift and go to state 26
    FALSE           shift and go to state 34

    expressionAR                   shift and go to state 95
    listID                         shift and go to state 114
    expressionBo                   shift and go to state 96

state 107

    (22) inst -> FMT POINT PRINT LPAREN listID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 115


state 108

    (24) inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .

    FOR             reduce using rule 24 (inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 24 (inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .)
    FMT             reduce using rule 24 (inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 24 (inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .)
    RCURLBRACKET    reduce using rule 24 (inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .)


state 109

    (14) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE . LCURLBRACKET list RCURLBRACKET

    LCURLBRACKET    shift and go to state 116


state 110

    (12) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment . LCURLBRACKET list RCURLBRACKET

    LCURLBRACKET    shift and go to state 117


state 111

    (21) IDlist -> ID COMMA IDlist .

    RPAREN          reduce using rule 21 (IDlist -> ID COMMA IDlist .)


state 112

    (23) inst -> FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON .

    FOR             reduce using rule 23 (inst -> FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON .)
    IF              reduce using rule 23 (inst -> FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON .)
    FMT             reduce using rule 23 (inst -> FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON .)
    ID              reduce using rule 23 (inst -> FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON .)
    RCURLBRACKET    reduce using rule 23 (inst -> FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON .)


state 113

    (19) listID -> expressionAR COMMA listID .

    RPAREN          reduce using rule 19 (listID -> expressionAR COMMA listID .)


state 114

    (18) listID -> expressionBo COMMA listID .

    RPAREN          reduce using rule 18 (listID -> expressionBo COMMA listID .)


state 115

    (22) inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .

    FOR             reduce using rule 22 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    IF              reduce using rule 22 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    FMT             reduce using rule 22 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    ID              reduce using rule 22 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    RCURLBRACKET    reduce using rule 22 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)


state 116

    (14) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (22) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON
    (24) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (25) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 13

    list                           shift and go to state 118
    inst                           shift and go to state 14
    assignment                     shift and go to state 16

state 117

    (12) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (22) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON
    (24) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (25) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 13

    list                           shift and go to state 119
    inst                           shift and go to state 14
    assignment                     shift and go to state 16

state 118

    (14) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 120


state 119

    (12) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 121


state 120

    (14) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .

    FOR             reduce using rule 14 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 14 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 14 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 14 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 14 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)


state 121

    (12) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .

    FOR             reduce using rule 12 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 12 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 12 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 12 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 12 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .)

