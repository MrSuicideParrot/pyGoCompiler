Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    DEFER
    TYPE
    SELECT
    COMMENT
    RANGE
    CONST
    DEFAULT
    VAR
    CASE
    MAP
    INTERFACE
    GO
    RETURN
    SWITCH
    CONTINUE
    CHAN
    BREAK
    FALLTHROUGH
    STRUCT
    GOTO

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
Rule 2     statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET
Rule 3     list -> inst
Rule 4     list -> inst list
Rule 5     assignment -> ID ASSIGN expressionAR
Rule 6     assignment -> ID ASSIGN expressionBo
Rule 7     assignment -> ID EQUALS expressionAR
Rule 8     assignment -> ID EQUALS expressionBo
Rule 9     assignment -> ID INCREMENT
Rule 10    assignment -> ID DECREMENT
Rule 11    inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET
Rule 12    inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
Rule 13    inst -> assignment SEMICOLON
Rule 14    inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
Rule 15    inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET
Rule 16    listID -> expressionAR
Rule 17    listID -> expressionBo
Rule 18    listID -> expressionBo COMMA listID
Rule 19    listID -> expressionAR COMMA listID
Rule 20    inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
Rule 21    inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
Rule 22    inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON
Rule 23    inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON
Rule 24    expressionAR -> expressionAR PLUS expressionAR
Rule 25    expressionAR -> expressionAR MINUS expressionAR
Rule 26    expressionAR -> expressionAR TIMES expressionAR
Rule 27    expressionAR -> expressionAR DIVIDE expressionAR
Rule 28    expressionAR -> ID
Rule 29    expressionAR -> INT
Rule 30    expressionAR -> MINUS expressionAR
Rule 31    expressionAR -> FLOAT
Rule 32    expressionAR -> LPAREN expressionAR RPAREN
Rule 33    expressionBo -> expressionAR MORE expressionAR
Rule 34    expressionBo -> expressionAR LESS expressionAR
Rule 35    expressionBo -> expressionAR MOREEQUAL expressionAR
Rule 36    expressionBo -> expressionAR LESSEQUAL expressionAR
Rule 37    expressionBo -> expressionBo NOTEQUAL expressionBo
Rule 38    expressionBo -> expressionAR NOTEQUAL expressionAR
Rule 39    expressionBo -> expressionBo EQUALSTO expressionBo
Rule 40    expressionBo -> expressionAR EQUALSTO expressionAR
Rule 41    expressionBo -> NOT expressionBo
Rule 42    expressionBo -> TRUE
Rule 43    expressionBo -> FALSE
Rule 44    expressionBo -> LPAREN expressionBo RPAREN

Terminals, with rules where they appear

ASSIGN               : 5 6
BREAK                : 
CASE                 : 
CHAN                 : 
COMMA                : 18 19
COMMENT              : 
CONST                : 
CONTINUE             : 
DECREMENT            : 10
DEFAULT              : 
DEFER                : 
DIVIDE               : 27
ELSE                 : 14
EQUALS               : 7 8
EQUALSTO             : 39 40
FALLTHROUGH          : 
FALSE                : 43
FLOAT                : 31
FMT                  : 20 21 22 23
FOR                  : 11 12
FUNC                 : 1 2
GO                   : 
GOTO                 : 
ID                   : 5 6 7 8 9 10 28
IF                   : 14 15
IMPORT               : 1 2
INCREMENT            : 9
INT                  : 29
INTERFACE            : 
LCURLBRACKET         : 1 2 11 12 14 14 15
LESS                 : 34
LESSEQUAL            : 36
LPAREN               : 1 2 20 21 22 23 32 44
MAIN                 : 1 1 2 2
MAP                  : 
MINUS                : 25 30
MORE                 : 33
MOREEQUAL            : 35
NOT                  : 41
NOTEQUAL             : 37 38
PACKAGE              : 1 2
PLUS                 : 24
POINT                : 20 21 22 23
PRINT                : 20 22
RANGE                : 
RCURLBRACKET         : 1 2 11 12 14 14 15
RETURN               : 
RPAREN               : 1 2 20 21 22 23 32 44
SCAN                 : 21 23
SELECT               : 
SEMICOLON            : 12 12 13 20 21 22 23
STRING               : 1 2
STRUCT               : 
SWITCH               : 
TIMES                : 26
TRUE                 : 42
TYPE                 : 
VAR                  : 
error                : 

Nonterminals, with rules where they appear

assignment           : 12 12 13
expressionAR         : 5 7 16 19 24 24 25 25 26 26 27 27 30 32 33 33 34 34 35 35 36 36 38 38 40 40
expressionBo         : 6 8 11 12 14 15 17 18 37 37 39 39 41 44
inst                 : 3 4
list                 : 1 4 11 12 14 14 15
listID               : 18 19 20 21
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> . PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    PACKAGE         shift and go to state 1

    statement                      shift and go to state 2

state 1

    (1) statement -> PACKAGE . MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE . MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    MAIN            shift and go to state 3


state 2

    (0) S' -> statement .



state 3

    (1) statement -> PACKAGE MAIN . IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN . IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    IMPORT          shift and go to state 4


state 4

    (1) statement -> PACKAGE MAIN IMPORT . STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT . STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    STRING          shift and go to state 5


state 5

    (1) statement -> PACKAGE MAIN IMPORT STRING . FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING . FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    FUNC            shift and go to state 6


state 6

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC . MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC . MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    MAIN            shift and go to state 7


state 7

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN . LPAREN RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN . LPAREN RPAREN LCURLBRACKET RCURLBRACKET

    LPAREN          shift and go to state 8


state 8

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN . RPAREN LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN . RPAREN LCURLBRACKET RCURLBRACKET

    RPAREN          shift and go to state 9


state 9

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN . LCURLBRACKET list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN . LCURLBRACKET RCURLBRACKET

    LCURLBRACKET    shift and go to state 10


state 10

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET . list RCURLBRACKET
    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET . RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (20) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (21) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (22) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    RCURLBRACKET    shift and go to state 16
    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 14

    assignment                     shift and go to state 11
    inst                           shift and go to state 18
    list                           shift and go to state 13

state 11

    (13) inst -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 19


state 12

    (20) inst -> FMT . POINT PRINT LPAREN listID RPAREN SEMICOLON
    (21) inst -> FMT . POINT SCAN LPAREN listID RPAREN SEMICOLON
    (22) inst -> FMT . POINT PRINT LPAREN RPAREN SEMICOLON
    (23) inst -> FMT . POINT SCAN LPAREN RPAREN SEMICOLON

    POINT           shift and go to state 20


state 13

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 21


state 14

    (5) assignment -> ID . ASSIGN expressionAR
    (6) assignment -> ID . ASSIGN expressionBo
    (7) assignment -> ID . EQUALS expressionAR
    (8) assignment -> ID . EQUALS expressionBo
    (9) assignment -> ID . INCREMENT
    (10) assignment -> ID . DECREMENT

    ASSIGN          shift and go to state 24
    EQUALS          shift and go to state 25
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 23


state 15

    (14) inst -> IF . expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> IF . expressionBo LCURLBRACKET list RCURLBRACKET
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27
    LPAREN          shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26

    expressionBo                   shift and go to state 28
    expressionAR                   shift and go to state 32

state 16

    (2) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET .

    $end            reduce using rule 2 (statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET .)


state 17

    (11) inst -> FOR . expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> FOR . assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27
    LPAREN          shift and go to state 29
    ID              shift and go to state 38
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26

    assignment                     shift and go to state 37
    expressionBo                   shift and go to state 36
    expressionAR                   shift and go to state 32

state 18

    (3) list -> inst .
    (4) list -> inst . list
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (20) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (21) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (22) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    RCURLBRACKET    reduce using rule 3 (list -> inst .)
    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 14

    assignment                     shift and go to state 11
    inst                           shift and go to state 18
    list                           shift and go to state 39

state 19

    (13) inst -> assignment SEMICOLON .

    FOR             reduce using rule 13 (inst -> assignment SEMICOLON .)
    IF              reduce using rule 13 (inst -> assignment SEMICOLON .)
    FMT             reduce using rule 13 (inst -> assignment SEMICOLON .)
    ID              reduce using rule 13 (inst -> assignment SEMICOLON .)
    RCURLBRACKET    reduce using rule 13 (inst -> assignment SEMICOLON .)


state 20

    (20) inst -> FMT POINT . PRINT LPAREN listID RPAREN SEMICOLON
    (21) inst -> FMT POINT . SCAN LPAREN listID RPAREN SEMICOLON
    (22) inst -> FMT POINT . PRINT LPAREN RPAREN SEMICOLON
    (23) inst -> FMT POINT . SCAN LPAREN RPAREN SEMICOLON

    PRINT           shift and go to state 41
    SCAN            shift and go to state 40


state 21

    (1) statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET .

    $end            reduce using rule 1 (statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET .)


state 22

    (9) assignment -> ID INCREMENT .

    SEMICOLON       reduce using rule 9 (assignment -> ID INCREMENT .)
    LCURLBRACKET    reduce using rule 9 (assignment -> ID INCREMENT .)


state 23

    (10) assignment -> ID DECREMENT .

    SEMICOLON       reduce using rule 10 (assignment -> ID DECREMENT .)
    LCURLBRACKET    reduce using rule 10 (assignment -> ID DECREMENT .)


state 24

    (5) assignment -> ID ASSIGN . expressionAR
    (6) assignment -> ID ASSIGN . expressionBo
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 44
    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27

    expressionBo                   shift and go to state 42
    expressionAR                   shift and go to state 43

state 25

    (7) assignment -> ID EQUALS . expressionAR
    (8) assignment -> ID EQUALS . expressionBo
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 44
    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27

    expressionBo                   shift and go to state 45
    expressionAR                   shift and go to state 46

state 26

    (31) expressionAR -> FLOAT .

    MORE            reduce using rule 31 (expressionAR -> FLOAT .)
    LESS            reduce using rule 31 (expressionAR -> FLOAT .)
    MOREEQUAL       reduce using rule 31 (expressionAR -> FLOAT .)
    LESSEQUAL       reduce using rule 31 (expressionAR -> FLOAT .)
    NOTEQUAL        reduce using rule 31 (expressionAR -> FLOAT .)
    EQUALSTO        reduce using rule 31 (expressionAR -> FLOAT .)
    PLUS            reduce using rule 31 (expressionAR -> FLOAT .)
    MINUS           reduce using rule 31 (expressionAR -> FLOAT .)
    TIMES           reduce using rule 31 (expressionAR -> FLOAT .)
    DIVIDE          reduce using rule 31 (expressionAR -> FLOAT .)
    COMMA           reduce using rule 31 (expressionAR -> FLOAT .)
    RPAREN          reduce using rule 31 (expressionAR -> FLOAT .)
    LCURLBRACKET    reduce using rule 31 (expressionAR -> FLOAT .)
    SEMICOLON       reduce using rule 31 (expressionAR -> FLOAT .)


state 27

    (43) expressionBo -> FALSE .

    NOTEQUAL        reduce using rule 43 (expressionBo -> FALSE .)
    EQUALSTO        reduce using rule 43 (expressionBo -> FALSE .)
    LCURLBRACKET    reduce using rule 43 (expressionBo -> FALSE .)
    SEMICOLON       reduce using rule 43 (expressionBo -> FALSE .)
    RPAREN          reduce using rule 43 (expressionBo -> FALSE .)
    COMMA           reduce using rule 43 (expressionBo -> FALSE .)


state 28

    (14) inst -> IF expressionBo . LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> IF expressionBo . LCURLBRACKET list RCURLBRACKET
    (37) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (39) expressionBo -> expressionBo . EQUALSTO expressionBo

    LCURLBRACKET    shift and go to state 49
    NOTEQUAL        shift and go to state 48
    EQUALSTO        shift and go to state 47


state 29

    (44) expressionBo -> LPAREN . expressionBo RPAREN
    (32) expressionAR -> LPAREN . expressionAR RPAREN
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27
    LPAREN          shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26

    expressionBo                   shift and go to state 51
    expressionAR                   shift and go to state 50

state 30

    (28) expressionAR -> ID .

    MORE            reduce using rule 28 (expressionAR -> ID .)
    LESS            reduce using rule 28 (expressionAR -> ID .)
    MOREEQUAL       reduce using rule 28 (expressionAR -> ID .)
    LESSEQUAL       reduce using rule 28 (expressionAR -> ID .)
    NOTEQUAL        reduce using rule 28 (expressionAR -> ID .)
    EQUALSTO        reduce using rule 28 (expressionAR -> ID .)
    PLUS            reduce using rule 28 (expressionAR -> ID .)
    MINUS           reduce using rule 28 (expressionAR -> ID .)
    TIMES           reduce using rule 28 (expressionAR -> ID .)
    DIVIDE          reduce using rule 28 (expressionAR -> ID .)
    COMMA           reduce using rule 28 (expressionAR -> ID .)
    RPAREN          reduce using rule 28 (expressionAR -> ID .)
    LCURLBRACKET    reduce using rule 28 (expressionAR -> ID .)
    SEMICOLON       reduce using rule 28 (expressionAR -> ID .)


state 31

    (41) expressionBo -> NOT . expressionBo
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27
    LPAREN          shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26

    expressionBo                   shift and go to state 52
    expressionAR                   shift and go to state 32

state 32

    (33) expressionBo -> expressionAR . MORE expressionAR
    (34) expressionBo -> expressionAR . LESS expressionAR
    (35) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (36) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (38) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (40) expressionBo -> expressionAR . EQUALSTO expressionAR
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            shift and go to state 56
    LESS            shift and go to state 58
    MOREEQUAL       shift and go to state 59
    LESSEQUAL       shift and go to state 55
    NOTEQUAL        shift and go to state 62
    EQUALSTO        shift and go to state 53
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54


state 33

    (42) expressionBo -> TRUE .

    NOTEQUAL        reduce using rule 42 (expressionBo -> TRUE .)
    EQUALSTO        reduce using rule 42 (expressionBo -> TRUE .)
    LCURLBRACKET    reduce using rule 42 (expressionBo -> TRUE .)
    SEMICOLON       reduce using rule 42 (expressionBo -> TRUE .)
    RPAREN          reduce using rule 42 (expressionBo -> TRUE .)
    COMMA           reduce using rule 42 (expressionBo -> TRUE .)


state 34

    (30) expressionAR -> MINUS . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 64

state 35

    (29) expressionAR -> INT .

    MORE            reduce using rule 29 (expressionAR -> INT .)
    LESS            reduce using rule 29 (expressionAR -> INT .)
    MOREEQUAL       reduce using rule 29 (expressionAR -> INT .)
    LESSEQUAL       reduce using rule 29 (expressionAR -> INT .)
    NOTEQUAL        reduce using rule 29 (expressionAR -> INT .)
    EQUALSTO        reduce using rule 29 (expressionAR -> INT .)
    PLUS            reduce using rule 29 (expressionAR -> INT .)
    MINUS           reduce using rule 29 (expressionAR -> INT .)
    TIMES           reduce using rule 29 (expressionAR -> INT .)
    DIVIDE          reduce using rule 29 (expressionAR -> INT .)
    COMMA           reduce using rule 29 (expressionAR -> INT .)
    RPAREN          reduce using rule 29 (expressionAR -> INT .)
    LCURLBRACKET    reduce using rule 29 (expressionAR -> INT .)
    SEMICOLON       reduce using rule 29 (expressionAR -> INT .)


state 36

    (11) inst -> FOR expressionBo . LCURLBRACKET list RCURLBRACKET
    (37) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (39) expressionBo -> expressionBo . EQUALSTO expressionBo

    LCURLBRACKET    shift and go to state 65
    NOTEQUAL        shift and go to state 48
    EQUALSTO        shift and go to state 47


state 37

    (12) inst -> FOR assignment . SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET

    SEMICOLON       shift and go to state 66


state 38

    (5) assignment -> ID . ASSIGN expressionAR
    (6) assignment -> ID . ASSIGN expressionBo
    (7) assignment -> ID . EQUALS expressionAR
    (8) assignment -> ID . EQUALS expressionBo
    (9) assignment -> ID . INCREMENT
    (10) assignment -> ID . DECREMENT
    (28) expressionAR -> ID .

    ASSIGN          shift and go to state 24
    EQUALS          shift and go to state 25
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 23
    MORE            reduce using rule 28 (expressionAR -> ID .)
    LESS            reduce using rule 28 (expressionAR -> ID .)
    MOREEQUAL       reduce using rule 28 (expressionAR -> ID .)
    LESSEQUAL       reduce using rule 28 (expressionAR -> ID .)
    NOTEQUAL        reduce using rule 28 (expressionAR -> ID .)
    EQUALSTO        reduce using rule 28 (expressionAR -> ID .)
    PLUS            reduce using rule 28 (expressionAR -> ID .)
    MINUS           reduce using rule 28 (expressionAR -> ID .)
    TIMES           reduce using rule 28 (expressionAR -> ID .)
    DIVIDE          reduce using rule 28 (expressionAR -> ID .)


state 39

    (4) list -> inst list .

    RCURLBRACKET    reduce using rule 4 (list -> inst list .)


state 40

    (21) inst -> FMT POINT SCAN . LPAREN listID RPAREN SEMICOLON
    (23) inst -> FMT POINT SCAN . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 67


state 41

    (20) inst -> FMT POINT PRINT . LPAREN listID RPAREN SEMICOLON
    (22) inst -> FMT POINT PRINT . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 68


state 42

    (6) assignment -> ID ASSIGN expressionBo .
    (37) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (39) expressionBo -> expressionBo . EQUALSTO expressionBo

    SEMICOLON       reduce using rule 6 (assignment -> ID ASSIGN expressionBo .)
    LCURLBRACKET    reduce using rule 6 (assignment -> ID ASSIGN expressionBo .)
    NOTEQUAL        shift and go to state 48
    EQUALSTO        shift and go to state 47


state 43

    (5) assignment -> ID ASSIGN expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR
    (33) expressionBo -> expressionAR . MORE expressionAR
    (34) expressionBo -> expressionAR . LESS expressionAR
    (35) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (36) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (38) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (40) expressionBo -> expressionAR . EQUALSTO expressionAR

    SEMICOLON       reduce using rule 5 (assignment -> ID ASSIGN expressionAR .)
    LCURLBRACKET    reduce using rule 5 (assignment -> ID ASSIGN expressionAR .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54
    MORE            shift and go to state 56
    LESS            shift and go to state 58
    MOREEQUAL       shift and go to state 59
    LESSEQUAL       shift and go to state 55
    NOTEQUAL        shift and go to state 62
    EQUALSTO        shift and go to state 53


state 44

    (32) expressionAR -> LPAREN . expressionAR RPAREN
    (44) expressionBo -> LPAREN . expressionBo RPAREN
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 44
    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27

    expressionBo                   shift and go to state 51
    expressionAR                   shift and go to state 69

state 45

    (8) assignment -> ID EQUALS expressionBo .
    (37) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (39) expressionBo -> expressionBo . EQUALSTO expressionBo

    SEMICOLON       reduce using rule 8 (assignment -> ID EQUALS expressionBo .)
    LCURLBRACKET    reduce using rule 8 (assignment -> ID EQUALS expressionBo .)
    NOTEQUAL        shift and go to state 48
    EQUALSTO        shift and go to state 47


state 46

    (7) assignment -> ID EQUALS expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR
    (33) expressionBo -> expressionAR . MORE expressionAR
    (34) expressionBo -> expressionAR . LESS expressionAR
    (35) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (36) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (38) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (40) expressionBo -> expressionAR . EQUALSTO expressionAR

    SEMICOLON       reduce using rule 7 (assignment -> ID EQUALS expressionAR .)
    LCURLBRACKET    reduce using rule 7 (assignment -> ID EQUALS expressionAR .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54
    MORE            shift and go to state 56
    LESS            shift and go to state 58
    MOREEQUAL       shift and go to state 59
    LESSEQUAL       shift and go to state 55
    NOTEQUAL        shift and go to state 62
    EQUALSTO        shift and go to state 53


state 47

    (39) expressionBo -> expressionBo EQUALSTO . expressionBo
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27
    LPAREN          shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26

    expressionBo                   shift and go to state 70
    expressionAR                   shift and go to state 32

state 48

    (37) expressionBo -> expressionBo NOTEQUAL . expressionBo
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27
    LPAREN          shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26

    expressionBo                   shift and go to state 71
    expressionAR                   shift and go to state 32

state 49

    (14) inst -> IF expressionBo LCURLBRACKET . list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> IF expressionBo LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (20) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (21) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (22) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 14

    assignment                     shift and go to state 11
    inst                           shift and go to state 18
    list                           shift and go to state 72

state 50

    (32) expressionAR -> LPAREN expressionAR . RPAREN
    (33) expressionBo -> expressionAR . MORE expressionAR
    (34) expressionBo -> expressionAR . LESS expressionAR
    (35) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (36) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (38) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (40) expressionBo -> expressionAR . EQUALSTO expressionAR
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    RPAREN          shift and go to state 73
    MORE            shift and go to state 56
    LESS            shift and go to state 58
    MOREEQUAL       shift and go to state 59
    LESSEQUAL       shift and go to state 55
    NOTEQUAL        shift and go to state 62
    EQUALSTO        shift and go to state 53
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54


state 51

    (44) expressionBo -> LPAREN expressionBo . RPAREN
    (37) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (39) expressionBo -> expressionBo . EQUALSTO expressionBo

    RPAREN          shift and go to state 74
    NOTEQUAL        shift and go to state 48
    EQUALSTO        shift and go to state 47


state 52

    (41) expressionBo -> NOT expressionBo .
    (37) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (39) expressionBo -> expressionBo . EQUALSTO expressionBo

    NOTEQUAL        reduce using rule 41 (expressionBo -> NOT expressionBo .)
    EQUALSTO        reduce using rule 41 (expressionBo -> NOT expressionBo .)
    LCURLBRACKET    reduce using rule 41 (expressionBo -> NOT expressionBo .)
    SEMICOLON       reduce using rule 41 (expressionBo -> NOT expressionBo .)
    RPAREN          reduce using rule 41 (expressionBo -> NOT expressionBo .)
    COMMA           reduce using rule 41 (expressionBo -> NOT expressionBo .)

  ! NOTEQUAL        [ shift and go to state 48 ]
  ! EQUALSTO        [ shift and go to state 47 ]


state 53

    (40) expressionBo -> expressionAR EQUALSTO . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 75

state 54

    (27) expressionAR -> expressionAR DIVIDE . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 76

state 55

    (36) expressionBo -> expressionAR LESSEQUAL . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 77

state 56

    (33) expressionBo -> expressionAR MORE . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 78

state 57

    (24) expressionAR -> expressionAR PLUS . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 79

state 58

    (34) expressionBo -> expressionAR LESS . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 80

state 59

    (35) expressionBo -> expressionAR MOREEQUAL . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 81

state 60

    (25) expressionAR -> expressionAR MINUS . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 82

state 61

    (26) expressionAR -> expressionAR TIMES . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 83

state 62

    (38) expressionBo -> expressionAR NOTEQUAL . expressionAR
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 84

state 63

    (32) expressionAR -> LPAREN . expressionAR RPAREN
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 63

    expressionAR                   shift and go to state 85

state 64

    (30) expressionAR -> MINUS expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    LESS            reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    MOREEQUAL       reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    LESSEQUAL       reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    NOTEQUAL        reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    EQUALSTO        reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    PLUS            reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    MINUS           reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    TIMES           reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    DIVIDE          reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    COMMA           reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    RPAREN          reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    LCURLBRACKET    reduce using rule 30 (expressionAR -> MINUS expressionAR .)
    SEMICOLON       reduce using rule 30 (expressionAR -> MINUS expressionAR .)

  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 54 ]


state 65

    (11) inst -> FOR expressionBo LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (20) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (21) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (22) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 14

    assignment                     shift and go to state 11
    inst                           shift and go to state 18
    list                           shift and go to state 86

state 66

    (12) inst -> FOR assignment SEMICOLON . expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN

    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27
    LPAREN          shift and go to state 29
    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26

    expressionBo                   shift and go to state 87
    expressionAR                   shift and go to state 32

state 67

    (21) inst -> FMT POINT SCAN LPAREN . listID RPAREN SEMICOLON
    (23) inst -> FMT POINT SCAN LPAREN . RPAREN SEMICOLON
    (16) listID -> . expressionAR
    (17) listID -> . expressionBo
    (18) listID -> . expressionBo COMMA listID
    (19) listID -> . expressionAR COMMA listID
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN

    RPAREN          shift and go to state 89
    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 44
    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27

    expressionBo                   shift and go to state 88
    listID                         shift and go to state 90
    expressionAR                   shift and go to state 91

state 68

    (20) inst -> FMT POINT PRINT LPAREN . listID RPAREN SEMICOLON
    (22) inst -> FMT POINT PRINT LPAREN . RPAREN SEMICOLON
    (16) listID -> . expressionAR
    (17) listID -> . expressionBo
    (18) listID -> . expressionBo COMMA listID
    (19) listID -> . expressionAR COMMA listID
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN

    RPAREN          shift and go to state 92
    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 44
    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27

    expressionBo                   shift and go to state 88
    listID                         shift and go to state 93
    expressionAR                   shift and go to state 91

state 69

    (32) expressionAR -> LPAREN expressionAR . RPAREN
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR
    (33) expressionBo -> expressionAR . MORE expressionAR
    (34) expressionBo -> expressionAR . LESS expressionAR
    (35) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (36) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (38) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (40) expressionBo -> expressionAR . EQUALSTO expressionAR

    RPAREN          shift and go to state 73
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54
    MORE            shift and go to state 56
    LESS            shift and go to state 58
    MOREEQUAL       shift and go to state 59
    LESSEQUAL       shift and go to state 55
    NOTEQUAL        shift and go to state 62
    EQUALSTO        shift and go to state 53


state 70

    (39) expressionBo -> expressionBo EQUALSTO expressionBo .
    (37) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (39) expressionBo -> expressionBo . EQUALSTO expressionBo

    NOTEQUAL        reduce using rule 39 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    EQUALSTO        reduce using rule 39 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    LCURLBRACKET    reduce using rule 39 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    SEMICOLON       reduce using rule 39 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    RPAREN          reduce using rule 39 (expressionBo -> expressionBo EQUALSTO expressionBo .)
    COMMA           reduce using rule 39 (expressionBo -> expressionBo EQUALSTO expressionBo .)

  ! NOTEQUAL        [ shift and go to state 48 ]
  ! EQUALSTO        [ shift and go to state 47 ]


state 71

    (37) expressionBo -> expressionBo NOTEQUAL expressionBo .
    (37) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (39) expressionBo -> expressionBo . EQUALSTO expressionBo

    NOTEQUAL        reduce using rule 37 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    EQUALSTO        reduce using rule 37 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    LCURLBRACKET    reduce using rule 37 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    SEMICOLON       reduce using rule 37 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    RPAREN          reduce using rule 37 (expressionBo -> expressionBo NOTEQUAL expressionBo .)
    COMMA           reduce using rule 37 (expressionBo -> expressionBo NOTEQUAL expressionBo .)

  ! NOTEQUAL        [ shift and go to state 48 ]
  ! EQUALSTO        [ shift and go to state 47 ]


state 72

    (14) inst -> IF expressionBo LCURLBRACKET list . RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> IF expressionBo LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 94


state 73

    (32) expressionAR -> LPAREN expressionAR RPAREN .

    MORE            reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    LESS            reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    MOREEQUAL       reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    LESSEQUAL       reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    NOTEQUAL        reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    EQUALSTO        reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    PLUS            reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    MINUS           reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    TIMES           reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    DIVIDE          reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    COMMA           reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    RPAREN          reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    LCURLBRACKET    reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)
    SEMICOLON       reduce using rule 32 (expressionAR -> LPAREN expressionAR RPAREN .)


state 74

    (44) expressionBo -> LPAREN expressionBo RPAREN .

    NOTEQUAL        reduce using rule 44 (expressionBo -> LPAREN expressionBo RPAREN .)
    EQUALSTO        reduce using rule 44 (expressionBo -> LPAREN expressionBo RPAREN .)
    LCURLBRACKET    reduce using rule 44 (expressionBo -> LPAREN expressionBo RPAREN .)
    SEMICOLON       reduce using rule 44 (expressionBo -> LPAREN expressionBo RPAREN .)
    RPAREN          reduce using rule 44 (expressionBo -> LPAREN expressionBo RPAREN .)
    COMMA           reduce using rule 44 (expressionBo -> LPAREN expressionBo RPAREN .)


state 75

    (40) expressionBo -> expressionAR EQUALSTO expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 40 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    EQUALSTO        reduce using rule 40 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    LCURLBRACKET    reduce using rule 40 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    SEMICOLON       reduce using rule 40 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    RPAREN          reduce using rule 40 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    COMMA           reduce using rule 40 (expressionBo -> expressionAR EQUALSTO expressionAR .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54


state 76

    (27) expressionAR -> expressionAR DIVIDE expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    LESS            reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    MOREEQUAL       reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    LESSEQUAL       reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    NOTEQUAL        reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    EQUALSTO        reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    PLUS            reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    MINUS           reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    TIMES           reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    DIVIDE          reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    COMMA           reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    RPAREN          reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    LCURLBRACKET    reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)
    SEMICOLON       reduce using rule 27 (expressionAR -> expressionAR DIVIDE expressionAR .)

  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 54 ]


state 77

    (36) expressionBo -> expressionAR LESSEQUAL expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 36 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    EQUALSTO        reduce using rule 36 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    LCURLBRACKET    reduce using rule 36 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    SEMICOLON       reduce using rule 36 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    RPAREN          reduce using rule 36 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    COMMA           reduce using rule 36 (expressionBo -> expressionAR LESSEQUAL expressionAR .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54


state 78

    (33) expressionBo -> expressionAR MORE expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 33 (expressionBo -> expressionAR MORE expressionAR .)
    EQUALSTO        reduce using rule 33 (expressionBo -> expressionAR MORE expressionAR .)
    LCURLBRACKET    reduce using rule 33 (expressionBo -> expressionAR MORE expressionAR .)
    SEMICOLON       reduce using rule 33 (expressionBo -> expressionAR MORE expressionAR .)
    RPAREN          reduce using rule 33 (expressionBo -> expressionAR MORE expressionAR .)
    COMMA           reduce using rule 33 (expressionBo -> expressionAR MORE expressionAR .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54


state 79

    (24) expressionAR -> expressionAR PLUS expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    LESS            reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    MOREEQUAL       reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    LESSEQUAL       reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    NOTEQUAL        reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    EQUALSTO        reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    PLUS            reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    MINUS           reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    COMMA           reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    RPAREN          reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    LCURLBRACKET    reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    SEMICOLON       reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54

  ! TIMES           [ reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .) ]
  ! DIVIDE          [ reduce using rule 24 (expressionAR -> expressionAR PLUS expressionAR .) ]
  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 60 ]


state 80

    (34) expressionBo -> expressionAR LESS expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 34 (expressionBo -> expressionAR LESS expressionAR .)
    EQUALSTO        reduce using rule 34 (expressionBo -> expressionAR LESS expressionAR .)
    LCURLBRACKET    reduce using rule 34 (expressionBo -> expressionAR LESS expressionAR .)
    SEMICOLON       reduce using rule 34 (expressionBo -> expressionAR LESS expressionAR .)
    RPAREN          reduce using rule 34 (expressionBo -> expressionAR LESS expressionAR .)
    COMMA           reduce using rule 34 (expressionBo -> expressionAR LESS expressionAR .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54


state 81

    (35) expressionBo -> expressionAR MOREEQUAL expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 35 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    EQUALSTO        reduce using rule 35 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    LCURLBRACKET    reduce using rule 35 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    SEMICOLON       reduce using rule 35 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    RPAREN          reduce using rule 35 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    COMMA           reduce using rule 35 (expressionBo -> expressionAR MOREEQUAL expressionAR .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54


state 82

    (25) expressionAR -> expressionAR MINUS expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    LESS            reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    MOREEQUAL       reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    LESSEQUAL       reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    NOTEQUAL        reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    EQUALSTO        reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    PLUS            reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    MINUS           reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    COMMA           reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    RPAREN          reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    LCURLBRACKET    reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    SEMICOLON       reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54

  ! TIMES           [ reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .) ]
  ! DIVIDE          [ reduce using rule 25 (expressionAR -> expressionAR MINUS expressionAR .) ]
  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 60 ]


state 83

    (26) expressionAR -> expressionAR TIMES expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    MORE            reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    LESS            reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    MOREEQUAL       reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    LESSEQUAL       reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    NOTEQUAL        reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    EQUALSTO        reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    PLUS            reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    MINUS           reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    TIMES           reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    DIVIDE          reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    COMMA           reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    RPAREN          reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    LCURLBRACKET    reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)
    SEMICOLON       reduce using rule 26 (expressionAR -> expressionAR TIMES expressionAR .)

  ! PLUS            [ shift and go to state 57 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIVIDE          [ shift and go to state 54 ]


state 84

    (38) expressionBo -> expressionAR NOTEQUAL expressionAR .
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    NOTEQUAL        reduce using rule 38 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    EQUALSTO        reduce using rule 38 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    LCURLBRACKET    reduce using rule 38 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    SEMICOLON       reduce using rule 38 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    RPAREN          reduce using rule 38 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    COMMA           reduce using rule 38 (expressionBo -> expressionAR NOTEQUAL expressionAR .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54


state 85

    (32) expressionAR -> LPAREN expressionAR . RPAREN
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR

    RPAREN          shift and go to state 73
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54


state 86

    (11) inst -> FOR expressionBo LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 95


state 87

    (12) inst -> FOR assignment SEMICOLON expressionBo . SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (37) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (39) expressionBo -> expressionBo . EQUALSTO expressionBo

    SEMICOLON       shift and go to state 96
    NOTEQUAL        shift and go to state 48
    EQUALSTO        shift and go to state 47


state 88

    (17) listID -> expressionBo .
    (18) listID -> expressionBo . COMMA listID
    (37) expressionBo -> expressionBo . NOTEQUAL expressionBo
    (39) expressionBo -> expressionBo . EQUALSTO expressionBo

    RPAREN          reduce using rule 17 (listID -> expressionBo .)
    COMMA           shift and go to state 97
    NOTEQUAL        shift and go to state 48
    EQUALSTO        shift and go to state 47


state 89

    (23) inst -> FMT POINT SCAN LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 98


state 90

    (21) inst -> FMT POINT SCAN LPAREN listID . RPAREN SEMICOLON

    RPAREN          shift and go to state 99


state 91

    (16) listID -> expressionAR .
    (19) listID -> expressionAR . COMMA listID
    (24) expressionAR -> expressionAR . PLUS expressionAR
    (25) expressionAR -> expressionAR . MINUS expressionAR
    (26) expressionAR -> expressionAR . TIMES expressionAR
    (27) expressionAR -> expressionAR . DIVIDE expressionAR
    (33) expressionBo -> expressionAR . MORE expressionAR
    (34) expressionBo -> expressionAR . LESS expressionAR
    (35) expressionBo -> expressionAR . MOREEQUAL expressionAR
    (36) expressionBo -> expressionAR . LESSEQUAL expressionAR
    (38) expressionBo -> expressionAR . NOTEQUAL expressionAR
    (40) expressionBo -> expressionAR . EQUALSTO expressionAR

    RPAREN          reduce using rule 16 (listID -> expressionAR .)
    COMMA           shift and go to state 100
    PLUS            shift and go to state 57
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 54
    MORE            shift and go to state 56
    LESS            shift and go to state 58
    MOREEQUAL       shift and go to state 59
    LESSEQUAL       shift and go to state 55
    NOTEQUAL        shift and go to state 62
    EQUALSTO        shift and go to state 53


state 92

    (22) inst -> FMT POINT PRINT LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 101


state 93

    (20) inst -> FMT POINT PRINT LPAREN listID . RPAREN SEMICOLON

    RPAREN          shift and go to state 102


state 94

    (14) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET . ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .

    ELSE            shift and go to state 103
    FOR             reduce using rule 15 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 15 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 15 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 15 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 15 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET .)


state 95

    (11) inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .

    FOR             reduce using rule 11 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 11 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 11 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 11 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 11 (inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET .)


state 96

    (12) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON . assignment LCURLBRACKET list RCURLBRACKET
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    ID              shift and go to state 14

    assignment                     shift and go to state 104

state 97

    (18) listID -> expressionBo COMMA . listID
    (16) listID -> . expressionAR
    (17) listID -> . expressionBo
    (18) listID -> . expressionBo COMMA listID
    (19) listID -> . expressionAR COMMA listID
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 44
    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27

    expressionBo                   shift and go to state 88
    listID                         shift and go to state 105
    expressionAR                   shift and go to state 91

state 98

    (23) inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .

    FOR             reduce using rule 23 (inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 23 (inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .)
    FMT             reduce using rule 23 (inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 23 (inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .)
    RCURLBRACKET    reduce using rule 23 (inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON .)


state 99

    (21) inst -> FMT POINT SCAN LPAREN listID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 106


state 100

    (19) listID -> expressionAR COMMA . listID
    (16) listID -> . expressionAR
    (17) listID -> . expressionBo
    (18) listID -> . expressionBo COMMA listID
    (19) listID -> . expressionAR COMMA listID
    (24) expressionAR -> . expressionAR PLUS expressionAR
    (25) expressionAR -> . expressionAR MINUS expressionAR
    (26) expressionAR -> . expressionAR TIMES expressionAR
    (27) expressionAR -> . expressionAR DIVIDE expressionAR
    (28) expressionAR -> . ID
    (29) expressionAR -> . INT
    (30) expressionAR -> . MINUS expressionAR
    (31) expressionAR -> . FLOAT
    (32) expressionAR -> . LPAREN expressionAR RPAREN
    (33) expressionBo -> . expressionAR MORE expressionAR
    (34) expressionBo -> . expressionAR LESS expressionAR
    (35) expressionBo -> . expressionAR MOREEQUAL expressionAR
    (36) expressionBo -> . expressionAR LESSEQUAL expressionAR
    (37) expressionBo -> . expressionBo NOTEQUAL expressionBo
    (38) expressionBo -> . expressionAR NOTEQUAL expressionAR
    (39) expressionBo -> . expressionBo EQUALSTO expressionBo
    (40) expressionBo -> . expressionAR EQUALSTO expressionAR
    (41) expressionBo -> . NOT expressionBo
    (42) expressionBo -> . TRUE
    (43) expressionBo -> . FALSE
    (44) expressionBo -> . LPAREN expressionBo RPAREN

    ID              shift and go to state 30
    INT             shift and go to state 35
    MINUS           shift and go to state 34
    FLOAT           shift and go to state 26
    LPAREN          shift and go to state 44
    NOT             shift and go to state 31
    TRUE            shift and go to state 33
    FALSE           shift and go to state 27

    expressionBo                   shift and go to state 88
    listID                         shift and go to state 107
    expressionAR                   shift and go to state 91

state 101

    (22) inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .

    FOR             reduce using rule 22 (inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 22 (inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .)
    FMT             reduce using rule 22 (inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 22 (inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .)
    RCURLBRACKET    reduce using rule 22 (inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON .)


state 102

    (20) inst -> FMT POINT PRINT LPAREN listID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 108


state 103

    (14) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE . LCURLBRACKET list RCURLBRACKET

    LCURLBRACKET    shift and go to state 109


state 104

    (12) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment . LCURLBRACKET list RCURLBRACKET

    LCURLBRACKET    shift and go to state 110


state 105

    (18) listID -> expressionBo COMMA listID .

    RPAREN          reduce using rule 18 (listID -> expressionBo COMMA listID .)


state 106

    (21) inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .

    FOR             reduce using rule 21 (inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .)
    IF              reduce using rule 21 (inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .)
    FMT             reduce using rule 21 (inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .)
    ID              reduce using rule 21 (inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .)
    RCURLBRACKET    reduce using rule 21 (inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON .)


state 107

    (19) listID -> expressionAR COMMA listID .

    RPAREN          reduce using rule 19 (listID -> expressionAR COMMA listID .)


state 108

    (20) inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .

    FOR             reduce using rule 20 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    IF              reduce using rule 20 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    FMT             reduce using rule 20 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    ID              reduce using rule 20 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)
    RCURLBRACKET    reduce using rule 20 (inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON .)


state 109

    (14) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (20) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (21) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (22) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 14

    assignment                     shift and go to state 11
    inst                           shift and go to state 18
    list                           shift and go to state 111

state 110

    (12) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET . list RCURLBRACKET
    (3) list -> . inst
    (4) list -> . inst list
    (11) inst -> . FOR expressionBo LCURLBRACKET list RCURLBRACKET
    (12) inst -> . FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET
    (13) inst -> . assignment SEMICOLON
    (14) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET
    (15) inst -> . IF expressionBo LCURLBRACKET list RCURLBRACKET
    (20) inst -> . FMT POINT PRINT LPAREN listID RPAREN SEMICOLON
    (21) inst -> . FMT POINT SCAN LPAREN listID RPAREN SEMICOLON
    (22) inst -> . FMT POINT PRINT LPAREN RPAREN SEMICOLON
    (23) inst -> . FMT POINT SCAN LPAREN RPAREN SEMICOLON
    (5) assignment -> . ID ASSIGN expressionAR
    (6) assignment -> . ID ASSIGN expressionBo
    (7) assignment -> . ID EQUALS expressionAR
    (8) assignment -> . ID EQUALS expressionBo
    (9) assignment -> . ID INCREMENT
    (10) assignment -> . ID DECREMENT

    FOR             shift and go to state 17
    IF              shift and go to state 15
    FMT             shift and go to state 12
    ID              shift and go to state 14

    assignment                     shift and go to state 11
    inst                           shift and go to state 18
    list                           shift and go to state 112

state 111

    (14) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 113


state 112

    (12) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list . RCURLBRACKET

    RCURLBRACKET    shift and go to state 114


state 113

    (14) inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .

    FOR             reduce using rule 14 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 14 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 14 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 14 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 14 (inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET .)


state 114

    (12) inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .

    FOR             reduce using rule 12 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .)
    IF              reduce using rule 12 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .)
    FMT             reduce using rule 12 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .)
    ID              reduce using rule 12 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .)
    RCURLBRACKET    reduce using rule 12 (inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET .)

