Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUALS
    COMMENT
    STRING
    EQUALSTO
    MORE
    LESS
    MOREEQUAL
    LESSEQUAL
    NOTEQUAL
    BREAK
    CASE
    CHAN
    CONST
    CONTINUE
    DEFAULT
    DEFER
    ELSE
    FALLTHROUGH
    FOR
    FUNC
    GO
    GOTO
    IF
    IMPORT
    INTERFACE
    MAP
    PACKAGE
    RANGE
    RETURN
    SELECT
    STRUCT
    SWITCH
    TYPE
    VAR

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expr_list
Rule 2     expr_list -> expression
Rule 3     expr_list -> expression expr_list
Rule 4     expression -> expression PLUS expression
Rule 5     expression -> expression MINUS expression
Rule 6     expression -> expression TIMES expression
Rule 7     expression -> expression DIVIDE expression
Rule 8     expression -> MINUS expression
Rule 9     expression -> INT
Rule 10    expression -> FLOAT
Rule 11    expression -> LPAREN expression RPAREN
Rule 12    expression -> ID

Terminals, with rules where they appear

BREAK                : 
CASE                 : 
CHAN                 : 
COMMENT              : 
CONST                : 
CONTINUE             : 
DEFAULT              : 
DEFER                : 
DIVIDE               : 7
ELSE                 : 
EQUALS               : 
EQUALSTO             : 
FALLTHROUGH          : 
FLOAT                : 10
FOR                  : 
FUNC                 : 
GO                   : 
GOTO                 : 
ID                   : 12
IF                   : 
IMPORT               : 
INT                  : 9
INTERFACE            : 
LESS                 : 
LESSEQUAL            : 
LPAREN               : 11
MAP                  : 
MINUS                : 5 8
MORE                 : 
MOREEQUAL            : 
NOTEQUAL             : 
PACKAGE              : 
PLUS                 : 4
RANGE                : 
RETURN               : 
RPAREN               : 11
SELECT               : 
STRING               : 
STRUCT               : 
SWITCH               : 
TIMES                : 6
TYPE                 : 
VAR                  : 
error                : 

Nonterminals, with rules where they appear

expr_list            : 1 3
expression           : 2 3 4 4 5 5 6 6 7 7 8 11
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expr_list
    (2) expr_list -> . expression
    (3) expr_list -> . expression expr_list
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 8

    statement                      shift and go to state 1
    expr_list                      shift and go to state 2
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expr_list .

    $end            reduce using rule 1 (statement -> expr_list .)


state 3

    (2) expr_list -> expression .
    (3) expr_list -> expression . expr_list
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression
    (2) expr_list -> . expression
    (3) expr_list -> . expression expr_list
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . ID

    $end            reduce using rule 2 (expr_list -> expression .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 8

    expression                     shift and go to state 3
    expr_list                      shift and go to state 9

state 4

    (8) expression -> MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 8

    expression                     shift and go to state 14

state 5

    (9) expression -> INT .

    PLUS            reduce using rule 9 (expression -> INT .)
    MINUS           reduce using rule 9 (expression -> INT .)
    TIMES           reduce using rule 9 (expression -> INT .)
    DIVIDE          reduce using rule 9 (expression -> INT .)
    INT             reduce using rule 9 (expression -> INT .)
    FLOAT           reduce using rule 9 (expression -> INT .)
    LPAREN          reduce using rule 9 (expression -> INT .)
    ID              reduce using rule 9 (expression -> INT .)
    $end            reduce using rule 9 (expression -> INT .)
    RPAREN          reduce using rule 9 (expression -> INT .)


state 6

    (10) expression -> FLOAT .

    PLUS            reduce using rule 10 (expression -> FLOAT .)
    MINUS           reduce using rule 10 (expression -> FLOAT .)
    TIMES           reduce using rule 10 (expression -> FLOAT .)
    DIVIDE          reduce using rule 10 (expression -> FLOAT .)
    INT             reduce using rule 10 (expression -> FLOAT .)
    FLOAT           reduce using rule 10 (expression -> FLOAT .)
    LPAREN          reduce using rule 10 (expression -> FLOAT .)
    ID              reduce using rule 10 (expression -> FLOAT .)
    $end            reduce using rule 10 (expression -> FLOAT .)
    RPAREN          reduce using rule 10 (expression -> FLOAT .)


state 7

    (11) expression -> LPAREN . expression RPAREN
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 8

    expression                     shift and go to state 15

state 8

    (12) expression -> ID .

    PLUS            reduce using rule 12 (expression -> ID .)
    MINUS           reduce using rule 12 (expression -> ID .)
    TIMES           reduce using rule 12 (expression -> ID .)
    DIVIDE          reduce using rule 12 (expression -> ID .)
    INT             reduce using rule 12 (expression -> ID .)
    FLOAT           reduce using rule 12 (expression -> ID .)
    LPAREN          reduce using rule 12 (expression -> ID .)
    ID              reduce using rule 12 (expression -> ID .)
    $end            reduce using rule 12 (expression -> ID .)
    RPAREN          reduce using rule 12 (expression -> ID .)


state 9

    (3) expr_list -> expression expr_list .

    $end            reduce using rule 3 (expr_list -> expression expr_list .)


state 10

    (4) expression -> expression PLUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 8

    expression                     shift and go to state 16

state 11

    (5) expression -> expression MINUS . expression
    (8) expression -> MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 8

    expression                     shift and go to state 17

state 12

    (6) expression -> expression TIMES . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 8

    expression                     shift and go to state 18

state 13

    (7) expression -> expression DIVIDE . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 8

    expression                     shift and go to state 19

state 14

    (8) expression -> MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> MINUS expression .)
    MINUS           reduce using rule 8 (expression -> MINUS expression .)
    TIMES           reduce using rule 8 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 8 (expression -> MINUS expression .)
    INT             reduce using rule 8 (expression -> MINUS expression .)
    FLOAT           reduce using rule 8 (expression -> MINUS expression .)
    LPAREN          reduce using rule 8 (expression -> MINUS expression .)
    ID              reduce using rule 8 (expression -> MINUS expression .)
    $end            reduce using rule 8 (expression -> MINUS expression .)
    RPAREN          reduce using rule 8 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 20 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 15

    (11) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 21
    PLUS            shift and go to state 10
    MINUS           shift and go to state 20
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13


state 16

    (4) expression -> expression PLUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 4 (expression -> expression PLUS expression .)
    INT             reduce using rule 4 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 4 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 4 (expression -> expression PLUS expression .)
    ID              reduce using rule 4 (expression -> expression PLUS expression .)
    $end            reduce using rule 4 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13

  ! TIMES           [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 20 ]


state 17

    (5) expression -> expression MINUS expression .
    (8) expression -> MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

  ! reduce/reduce conflict for PLUS resolved using rule 5 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 5 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 5 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 5 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for INT resolved using rule 5 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 5 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for ID resolved using rule 5 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for $end resolved using rule 5 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 5 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 5 (expression -> expression MINUS expression .)
    INT             reduce using rule 5 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 5 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 5 (expression -> expression MINUS expression .)
    ID              reduce using rule 5 (expression -> expression MINUS expression .)
    $end            reduce using rule 5 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13

  ! TIMES           [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! TIMES           [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! INT             [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! FLOAT           [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! LPAREN          [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! ID              [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! $end            [ reduce using rule 8 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 20 ]


state 18

    (6) expression -> expression TIMES expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 6 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 6 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 6 (expression -> expression TIMES expression .)
    INT             reduce using rule 6 (expression -> expression TIMES expression .)
    FLOAT           reduce using rule 6 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 6 (expression -> expression TIMES expression .)
    ID              reduce using rule 6 (expression -> expression TIMES expression .)
    $end            reduce using rule 6 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 6 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 20 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 19

    (7) expression -> expression DIVIDE expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 7 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 7 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 7 (expression -> expression DIVIDE expression .)
    INT             reduce using rule 7 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 7 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 7 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 7 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 7 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 7 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 20 ]
  ! TIMES           [ shift and go to state 12 ]
  ! DIVIDE          [ shift and go to state 13 ]


state 20

    (5) expression -> expression MINUS . expression
    (4) expression -> . expression PLUS expression
    (5) expression -> . expression MINUS expression
    (6) expression -> . expression TIMES expression
    (7) expression -> . expression DIVIDE expression
    (8) expression -> . MINUS expression
    (9) expression -> . INT
    (10) expression -> . FLOAT
    (11) expression -> . LPAREN expression RPAREN
    (12) expression -> . ID

    MINUS           shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 8

    expression                     shift and go to state 22

state 21

    (11) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 11 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 11 (expression -> LPAREN expression RPAREN .)


state 22

    (5) expression -> expression MINUS expression .
    (4) expression -> expression . PLUS expression
    (5) expression -> expression . MINUS expression
    (6) expression -> expression . TIMES expression
    (7) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 5 (expression -> expression MINUS expression .)
    INT             reduce using rule 5 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 5 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 5 (expression -> expression MINUS expression .)
    ID              reduce using rule 5 (expression -> expression MINUS expression .)
    $end            reduce using rule 5 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 12
    DIVIDE          shift and go to state 13

  ! TIMES           [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 20 ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 17 resolved using rule (expression -> expression MINUS expression)
WARNING: rejected rule (expression -> MINUS expression) in state 17
