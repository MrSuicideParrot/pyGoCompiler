Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUALS
    VAR

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression TIMES expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> LPAREN expression RPAREN
Rule 6     expression -> PLUS INT
Rule 7     expression -> MINUS INT
Rule 8     expression -> PLUS FLOAT
Rule 9     expression -> MINUS FLOAT
Rule 10    expression -> INT
Rule 11    expression -> FLOAT

Terminals, with rules where they appear

DIVIDE               : 4
EQUALS               : 
FLOAT                : 8 9 11
INT                  : 6 7 10
LPAREN               : 5
MINUS                : 2 7 9
PLUS                 : 1 6 8
RPAREN               : 5
TIMES                : 3
VAR                  : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . PLUS INT
    (7) expression -> . MINUS INT
    (8) expression -> . PLUS FLOAT
    (9) expression -> . MINUS FLOAT
    (10) expression -> . INT
    (11) expression -> . FLOAT

    LPAREN          shift and go to state 4
    PLUS            shift and go to state 2
    MINUS           shift and go to state 3
    INT             shift and go to state 5
    FLOAT           shift and go to state 6

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10


state 2

    (6) expression -> PLUS . INT
    (8) expression -> PLUS . FLOAT

    INT             shift and go to state 11
    FLOAT           shift and go to state 12


state 3

    (7) expression -> MINUS . INT
    (9) expression -> MINUS . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 14


state 4

    (5) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . PLUS INT
    (7) expression -> . MINUS INT
    (8) expression -> . PLUS FLOAT
    (9) expression -> . MINUS FLOAT
    (10) expression -> . INT
    (11) expression -> . FLOAT

    LPAREN          shift and go to state 4
    PLUS            shift and go to state 2
    MINUS           shift and go to state 3
    INT             shift and go to state 5
    FLOAT           shift and go to state 6

    expression                     shift and go to state 15

state 5

    (10) expression -> INT .

    PLUS            reduce using rule 10 (expression -> INT .)
    MINUS           reduce using rule 10 (expression -> INT .)
    TIMES           reduce using rule 10 (expression -> INT .)
    DIVIDE          reduce using rule 10 (expression -> INT .)
    $end            reduce using rule 10 (expression -> INT .)
    RPAREN          reduce using rule 10 (expression -> INT .)


state 6

    (11) expression -> FLOAT .

    PLUS            reduce using rule 11 (expression -> FLOAT .)
    MINUS           reduce using rule 11 (expression -> FLOAT .)
    TIMES           reduce using rule 11 (expression -> FLOAT .)
    DIVIDE          reduce using rule 11 (expression -> FLOAT .)
    $end            reduce using rule 11 (expression -> FLOAT .)
    RPAREN          reduce using rule 11 (expression -> FLOAT .)


state 7

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . PLUS INT
    (7) expression -> . MINUS INT
    (8) expression -> . PLUS FLOAT
    (9) expression -> . MINUS FLOAT
    (10) expression -> . INT
    (11) expression -> . FLOAT

    LPAREN          shift and go to state 4
    PLUS            shift and go to state 2
    MINUS           shift and go to state 3
    INT             shift and go to state 5
    FLOAT           shift and go to state 6

    expression                     shift and go to state 16

state 8

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . PLUS INT
    (7) expression -> . MINUS INT
    (8) expression -> . PLUS FLOAT
    (9) expression -> . MINUS FLOAT
    (10) expression -> . INT
    (11) expression -> . FLOAT

    LPAREN          shift and go to state 4
    PLUS            shift and go to state 2
    MINUS           shift and go to state 3
    INT             shift and go to state 5
    FLOAT           shift and go to state 6

    expression                     shift and go to state 17

state 9

    (3) expression -> expression TIMES . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . PLUS INT
    (7) expression -> . MINUS INT
    (8) expression -> . PLUS FLOAT
    (9) expression -> . MINUS FLOAT
    (10) expression -> . INT
    (11) expression -> . FLOAT

    LPAREN          shift and go to state 4
    PLUS            shift and go to state 2
    MINUS           shift and go to state 3
    INT             shift and go to state 5
    FLOAT           shift and go to state 6

    expression                     shift and go to state 18

state 10

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . PLUS INT
    (7) expression -> . MINUS INT
    (8) expression -> . PLUS FLOAT
    (9) expression -> . MINUS FLOAT
    (10) expression -> . INT
    (11) expression -> . FLOAT

    LPAREN          shift and go to state 4
    PLUS            shift and go to state 2
    MINUS           shift and go to state 3
    INT             shift and go to state 5
    FLOAT           shift and go to state 6

    expression                     shift and go to state 19

state 11

    (6) expression -> PLUS INT .

    PLUS            reduce using rule 6 (expression -> PLUS INT .)
    MINUS           reduce using rule 6 (expression -> PLUS INT .)
    TIMES           reduce using rule 6 (expression -> PLUS INT .)
    DIVIDE          reduce using rule 6 (expression -> PLUS INT .)
    $end            reduce using rule 6 (expression -> PLUS INT .)
    RPAREN          reduce using rule 6 (expression -> PLUS INT .)


state 12

    (8) expression -> PLUS FLOAT .

    PLUS            reduce using rule 8 (expression -> PLUS FLOAT .)
    MINUS           reduce using rule 8 (expression -> PLUS FLOAT .)
    TIMES           reduce using rule 8 (expression -> PLUS FLOAT .)
    DIVIDE          reduce using rule 8 (expression -> PLUS FLOAT .)
    $end            reduce using rule 8 (expression -> PLUS FLOAT .)
    RPAREN          reduce using rule 8 (expression -> PLUS FLOAT .)


state 13

    (7) expression -> MINUS INT .

    PLUS            reduce using rule 7 (expression -> MINUS INT .)
    MINUS           reduce using rule 7 (expression -> MINUS INT .)
    TIMES           reduce using rule 7 (expression -> MINUS INT .)
    DIVIDE          reduce using rule 7 (expression -> MINUS INT .)
    $end            reduce using rule 7 (expression -> MINUS INT .)
    RPAREN          reduce using rule 7 (expression -> MINUS INT .)


state 14

    (9) expression -> MINUS FLOAT .

    PLUS            reduce using rule 9 (expression -> MINUS FLOAT .)
    MINUS           reduce using rule 9 (expression -> MINUS FLOAT .)
    TIMES           reduce using rule 9 (expression -> MINUS FLOAT .)
    DIVIDE          reduce using rule 9 (expression -> MINUS FLOAT .)
    $end            reduce using rule 9 (expression -> MINUS FLOAT .)
    RPAREN          reduce using rule 9 (expression -> MINUS FLOAT .)


state 15

    (5) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 20
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10


state 16

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10

  ! TIMES           [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]


state 17

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    $end            reduce using rule 2 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10

  ! TIMES           [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]


state 18

    (3) expression -> expression TIMES expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 3 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 3 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 3 (expression -> expression TIMES expression .)
    $end            reduce using rule 3 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 3 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]


state 19

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 4 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 4 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 4 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 4 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]


state 20

    (5) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (expression -> LPAREN expression RPAREN .)

