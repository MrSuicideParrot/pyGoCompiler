
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLESSMOREleftPLUSMINUSleftTIMESDIVIDErightUMINUSINT FLOAT PLUS MINUS TIMES DIVIDE EQUALS LPAREN RPAREN ID COMMENT STRING EQUALSTO MORE LESS MOREEQUAL LESSEQUAL NOTEQUAL CONTINUE FALLTHROUGH SPRINT CONST GOTO DEFER VAR TRUE RETURN IF MAIN TYPE FOR FUNC STRUCT RANGE SWITCH ELSE IMPORT DEFAULT CHAN PACKAGE BREAK CASE SSCAN INTERFACE SELECT GO FALSE MAPexpressionaAR : expressionAR PLUS expressionAR\n                     | expressionAR MINUS expressionAR\n                     | expressionAR TIMES expressionAR\n                     | expressionAR DIVIDE expressionARexpressionAR : MINUS expressionAR %prec UMINUSexpressionAR : INTexpressionAR : FLOATexpressionAR : LPAREN expressionAR RPARENexpressionAR : IDexpressionBo : expressionBo MORE expressionBo\n                    | expressionBo LESS expressionBo\n                    | expressionBo MOREEQUAL expressionBo\n                    | expressionBo LESSEQUAL expressionBo\n                    | expressionBo NOTEQUAL expressionBo\n                    | expressionBo EQUALSTO expressionBoexpressionBo : TRUE\n                    | FALSEexpressionBo : LPAREN expressionBo RPARENexpressionBo : ID'
    
_lr_action_items = {'MINUS':([0,1,3,4,5,6,7,8,10,11,12,13,14,],[1,1,1,-7,10,-9,-6,-5,1,1,1,1,-8,]),'ID':([0,1,3,10,11,12,13,],[6,6,6,6,6,6,6,]),'FLOAT':([0,1,3,10,11,12,13,],[4,4,4,4,4,4,4,]),'DIVIDE':([4,5,6,7,8,14,],[-7,12,-9,-6,-5,-8,]),'TIMES':([4,5,6,7,8,14,],[-7,11,-9,-6,-5,-8,]),'LPAREN':([0,1,3,10,11,12,13,],[3,3,3,3,3,3,3,]),'PLUS':([4,5,6,7,8,14,],[-7,13,-9,-6,-5,-8,]),'RPAREN':([4,6,7,8,9,14,],[-7,-9,-6,-5,14,-8,]),'$end':([2,4,6,7,8,14,15,16,17,18,],[0,-7,-9,-6,-5,-8,-2,-3,-4,-1,]),'INT':([0,1,3,10,11,12,13,],[7,7,7,7,7,7,7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressionAR':([0,1,3,10,11,12,13,],[5,8,9,15,16,17,18,]),'expressionaAR':([0,],[2,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressionaAR","S'",1,None,None,None),
  ('expressionaAR -> expressionAR PLUS expressionAR','expressionaAR',3,'p_expressionAR_binop','plintax.py',44),
  ('expressionaAR -> expressionAR MINUS expressionAR','expressionaAR',3,'p_expressionAR_binop','plintax.py',45),
  ('expressionaAR -> expressionAR TIMES expressionAR','expressionaAR',3,'p_expressionAR_binop','plintax.py',46),
  ('expressionaAR -> expressionAR DIVIDE expressionAR','expressionaAR',3,'p_expressionAR_binop','plintax.py',47),
  ('expressionAR -> MINUS expressionAR','expressionAR',2,'p_expressionAR_inverse','plintax.py',58),
  ('expressionAR -> INT','expressionAR',1,'p_expressionAR_int','plintax.py',63),
  ('expressionAR -> FLOAT','expressionAR',1,'p_expressionAR_float','plintax.py',68),
  ('expressionAR -> LPAREN expressionAR RPAREN','expressionAR',3,'p_expressionAR_group','plintax.py',73),
  ('expressionAR -> ID','expressionAR',1,'p_expressionAR_var','plintax.py',78),
  ('expressionBo -> expressionBo MORE expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',85),
  ('expressionBo -> expressionBo LESS expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',86),
  ('expressionBo -> expressionBo MOREEQUAL expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',87),
  ('expressionBo -> expressionBo LESSEQUAL expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',88),
  ('expressionBo -> expressionBo NOTEQUAL expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',89),
  ('expressionBo -> expressionBo EQUALSTO expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',90),
  ('expressionBo -> TRUE','expressionBo',1,'p_expressionBo_int','plintax.py',114),
  ('expressionBo -> FALSE','expressionBo',1,'p_expressionBo_int','plintax.py',115),
  ('expressionBo -> LPAREN expressionBo RPAREN','expressionBo',3,'p_expressionBo_group','plintax.py',123),
  ('expressionBo -> ID','expressionBo',1,'p_expressionBo_var','plintax.py',128),
]
