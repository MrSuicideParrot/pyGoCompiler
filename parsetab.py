
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLESSMOREEQUALSTOMOREEQUALLESSEQUALNOTEQUALleftPLUSMINUSleftTIMESDIVIDErightUMINUSINT FLOAT PLUS MINUS TIMES DIVIDE EQUALS LPAREN RPAREN LCURLBRACKET RCURLBRACKET ID COMMENT STRING ASSIGN SEMICOLON COMMA POINT EQUALSTO MORE LESS MOREEQUAL LESSEQUAL NOTEQUAL BREAK CASE CHAN CONST CONTINUE DEFAULT DEFER ELSE FALLTHROUGH FOR FUNC GO GOTO IF IMPORT INTERFACE MAP PACKAGE RANGE RETURN SELECT STRUCT SWITCH TYPE VAR MAIN FMT PRINT SCAN TRUE FALSEstatement : PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET\n                 | PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKETlist : inst\n            | inst listassignment : ID ASSIGN expressionAR\n                  | ID ASSIGN expressionBoequalizer : ID EQUALS expressionAR\n                  | ID EQUALS expressionBoinst : FOR expressionBo LCURLBRACKET list RCURLBRACKET\n            | FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKETinst : assignment SEMICOLONinst : IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET\n            | IF expressionBo LCURLBRACKET list RCURLBRACKETlistID : expressionAR\n              | expressionBo\n              | expressionBo COMMA listID\n              | expressionAR COMMA listIDinst : FMT POINT PRINT LPAREN listID RPAREN SEMICOLON\n            | FMT POINT SCAN LPAREN listID RPAREN SEMICOLONexpressionAR : expressionAR PLUS expressionAR\n                     | expressionAR MINUS expressionAR\n                     | expressionAR TIMES expressionAR\n                     | expressionAR DIVIDE expressionAR\n                     | IDexpressionAR : INTexpressionAR : MINUS INT %prec UMINUSexpressionAR : FLOATexpressionAR : MINUS FLOAT %prec UMINUSexpressionAR : LPAREN expressionAR RPARENexpressionBo : expressionAR MORE expressionAR\n                    | expressionAR LESS expressionAR\n                    | expressionAR MOREEQUAL expressionAR\n                    | expressionAR LESSEQUAL expressionAR\n                    | expressionBo NOTEQUAL expressionBo\n                    | expressionAR NOTEQUAL expressionAR\n                    | expressionBo EQUALSTO expressionBo\n                    | expressionAR EQUALSTO expressionARexpressionBo : TRUE\n                    | FALSEexpressionBo : LPAREN expressionBo RPAREN'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,12,19,],[0,-2,-1,]),'MAIN':([2,6,],[3,7,]),'IMPORT':([3,],[4,]),'STRING':([4,],[5,]),'FUNC':([5,],[6,]),'LPAREN':([7,14,16,26,35,37,38,39,40,41,42,43,44,45,46,47,48,49,55,56,59,65,78,79,82,92,93,],[8,26,26,26,59,26,26,26,65,65,65,65,65,65,65,65,65,65,78,79,59,65,59,59,65,59,59,]),'RPAREN':([8,24,25,29,30,33,50,51,52,53,61,62,64,66,67,68,69,70,71,72,73,74,75,76,80,83,85,86,87,88,98,99,],[9,-38,-39,-25,-27,-24,75,76,-26,-28,-34,-36,-30,-31,-32,-33,-35,-37,-20,-21,-22,-23,-40,-29,76,76,91,-14,-15,94,-17,-16,]),'LCURLBRACKET':([9,21,24,25,29,30,32,33,52,53,61,62,64,66,67,68,69,70,71,72,73,74,75,76,89,90,],[10,36,-38,-39,-25,-27,54,-24,-26,-28,-34,-36,-30,-31,-32,-33,-35,-37,-20,-21,-22,-23,-40,-29,95,96,]),'RCURLBRACKET':([10,11,13,20,31,60,77,81,84,97,100,101,102,103,104,],[12,19,-3,-4,-11,81,84,-9,-13,-18,-19,103,104,-10,-12,]),'FOR':([10,13,31,36,54,81,84,95,96,97,100,103,104,],[14,14,-11,14,14,-9,-13,14,14,-18,-19,-10,-12,]),'IF':([10,13,31,36,54,81,84,95,96,97,100,103,104,],[16,16,-11,16,16,-9,-13,16,16,-18,-19,-10,-12,]),'FMT':([10,13,31,36,54,81,84,95,96,97,100,103,104,],[17,17,-11,17,17,-9,-13,17,17,-18,-19,-10,-12,]),'ID':([10,13,14,16,26,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,54,59,65,78,79,81,82,84,92,93,95,96,97,100,103,104,],[18,18,27,33,33,-11,33,18,33,33,33,33,33,33,33,33,33,33,33,33,33,18,33,33,33,33,-9,33,-13,33,33,18,18,-18,-19,-10,-12,]),'TRUE':([14,16,26,35,37,38,39,59,78,79,92,93,],[24,24,24,24,24,24,24,24,24,24,24,24,]),'FALSE':([14,16,26,35,37,38,39,59,78,79,92,93,],[25,25,25,25,25,25,25,25,25,25,25,25,]),'INT':([14,16,26,28,35,37,38,39,40,41,42,43,44,45,46,47,48,49,59,65,78,79,82,92,93,],[29,29,29,52,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'MINUS':([14,16,23,26,27,29,30,33,35,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,57,59,64,65,66,67,68,69,70,71,72,73,74,76,78,79,80,82,83,86,89,92,93,],[28,28,47,28,-24,-25,-27,-24,28,28,28,28,28,28,28,28,28,28,28,28,28,28,47,-26,-28,47,28,47,28,47,47,47,47,47,-20,-21,-22,-23,-29,28,28,47,28,47,47,47,28,28,]),'FLOAT':([14,16,26,28,35,37,38,39,40,41,42,43,44,45,46,47,48,49,59,65,78,79,82,92,93,],[30,30,30,53,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'SEMICOLON':([15,22,24,25,29,30,33,52,53,57,58,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,91,94,],[31,39,-38,-39,-25,-27,-24,-26,-28,-5,-6,-34,-36,82,-30,-31,-32,-33,-35,-37,-20,-21,-22,-23,-40,-29,97,100,]),'POINT':([17,],[34,]),'ASSIGN':([18,27,],[35,35,]),'NOTEQUAL':([21,23,24,25,27,29,30,32,33,50,51,52,53,57,58,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,80,86,87,],[37,44,-38,-39,-24,-25,-27,37,-24,37,44,-26,-28,44,37,None,None,37,-30,-31,-32,-33,-35,-37,-20,-21,-22,-23,-40,-29,44,44,37,]),'EQUALSTO':([21,23,24,25,27,29,30,32,33,50,51,52,53,57,58,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,80,86,87,],[38,45,-38,-39,-24,-25,-27,38,-24,38,45,-26,-28,45,38,None,None,38,-30,-31,-32,-33,-35,-37,-20,-21,-22,-23,-40,-29,45,45,38,]),'MORE':([23,27,29,30,33,51,52,53,57,71,72,73,74,76,80,86,],[40,-24,-25,-27,-24,40,-26,-28,40,-20,-21,-22,-23,-29,40,40,]),'LESS':([23,27,29,30,33,51,52,53,57,71,72,73,74,76,80,86,],[41,-24,-25,-27,-24,41,-26,-28,41,-20,-21,-22,-23,-29,41,41,]),'MOREEQUAL':([23,27,29,30,33,51,52,53,57,71,72,73,74,76,80,86,],[42,-24,-25,-27,-24,42,-26,-28,42,-20,-21,-22,-23,-29,42,42,]),'LESSEQUAL':([23,27,29,30,33,51,52,53,57,71,72,73,74,76,80,86,],[43,-24,-25,-27,-24,43,-26,-28,43,-20,-21,-22,-23,-29,43,43,]),'PLUS':([23,27,29,30,33,51,52,53,57,64,66,67,68,69,70,71,72,73,74,76,80,83,86,89,],[46,-24,-25,-27,-24,46,-26,-28,46,46,46,46,46,46,46,-20,-21,-22,-23,-29,46,46,46,46,]),'TIMES':([23,27,29,30,33,51,52,53,57,64,66,67,68,69,70,71,72,73,74,76,80,83,86,89,],[48,-24,-25,-27,-24,48,-26,-28,48,48,48,48,48,48,48,48,48,-22,-23,-29,48,48,48,48,]),'DIVIDE':([23,27,29,30,33,51,52,53,57,64,66,67,68,69,70,71,72,73,74,76,80,83,86,89,],[49,-24,-25,-27,-24,49,-26,-28,49,49,49,49,49,49,49,49,49,-22,-23,-29,49,49,49,49,]),'COMMA':([24,25,29,30,33,52,53,61,62,64,66,67,68,69,70,71,72,73,74,75,76,86,87,],[-38,-39,-25,-27,-24,-26,-28,-34,-36,-30,-31,-32,-33,-35,-37,-20,-21,-22,-23,-40,-29,92,93,]),'PRINT':([34,],[55,]),'SCAN':([34,],[56,]),'ELSE':([84,],[90,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'list':([10,13,36,54,95,96,],[11,20,60,77,101,102,]),'inst':([10,13,36,54,95,96,],[13,13,13,13,13,13,]),'assignment':([10,13,14,36,54,95,96,],[15,15,22,15,15,15,15,]),'expressionBo':([14,16,26,35,37,38,39,59,78,79,92,93,],[21,32,50,58,61,62,63,50,87,87,87,87,]),'expressionAR':([14,16,26,35,37,38,39,40,41,42,43,44,45,46,47,48,49,59,65,78,79,82,92,93,],[23,23,51,57,23,23,23,64,66,67,68,69,70,71,72,73,74,80,83,86,86,89,86,86,]),'listID':([78,79,92,93,],[85,88,98,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET','statement',11,'p_statement_expr','plintax.py',19),
  ('statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET','statement',10,'p_statement_expr','plintax.py',20),
  ('list -> inst','list',1,'p_list','plintax.py',29),
  ('list -> inst list','list',2,'p_list','plintax.py',30),
  ('assignment -> ID ASSIGN expressionAR','assignment',3,'p_assignment','plintax.py',37),
  ('assignment -> ID ASSIGN expressionBo','assignment',3,'p_assignment','plintax.py',38),
  ('equalizer -> ID EQUALS expressionAR','equalizer',3,'p_equalizer','plintax.py',42),
  ('equalizer -> ID EQUALS expressionBo','equalizer',3,'p_equalizer','plintax.py',43),
  ('inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET','inst',5,'p_inst_For','plintax.py',49),
  ('inst -> FOR assignment SEMICOLON expressionBo SEMICOLON expressionAR LCURLBRACKET list RCURLBRACKET','inst',9,'p_inst_For','plintax.py',50),
  ('inst -> assignment SEMICOLON','inst',2,'p_inst_assignment','plintax.py',58),
  ('inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET','inst',9,'p_inst_If','plintax.py',63),
  ('inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET','inst',5,'p_inst_If','plintax.py',64),
  ('listID -> expressionAR','listID',1,'p_listID','plintax.py',71),
  ('listID -> expressionBo','listID',1,'p_listID','plintax.py',72),
  ('listID -> expressionBo COMMA listID','listID',3,'p_listID','plintax.py',73),
  ('listID -> expressionAR COMMA listID','listID',3,'p_listID','plintax.py',74),
  ('inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON','inst',7,'p_inst_func','plintax.py',90),
  ('inst -> FMT POINT SCAN LPAREN listID RPAREN SEMICOLON','inst',7,'p_inst_func','plintax.py',91),
  ('expressionAR -> expressionAR PLUS expressionAR','expressionAR',3,'p_expressionAR_binop','plintax.py',99),
  ('expressionAR -> expressionAR MINUS expressionAR','expressionAR',3,'p_expressionAR_binop','plintax.py',100),
  ('expressionAR -> expressionAR TIMES expressionAR','expressionAR',3,'p_expressionAR_binop','plintax.py',101),
  ('expressionAR -> expressionAR DIVIDE expressionAR','expressionAR',3,'p_expressionAR_binop','plintax.py',102),
  ('expressionAR -> ID','expressionAR',1,'p_expressionAR_binop','plintax.py',103),
  ('expressionAR -> INT','expressionAR',1,'p_expressionAR_int','plintax.py',118),
  ('expressionAR -> MINUS INT','expressionAR',2,'p_expressionAR_inverse_int','plintax.py',122),
  ('expressionAR -> FLOAT','expressionAR',1,'p_expressionAR_float','plintax.py',126),
  ('expressionAR -> MINUS FLOAT','expressionAR',2,'p_expressionAR_inverse_float','plintax.py',130),
  ('expressionAR -> LPAREN expressionAR RPAREN','expressionAR',3,'p_expressionAR_group','plintax.py',134),
  ('expressionBo -> expressionAR MORE expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',145),
  ('expressionBo -> expressionAR LESS expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',146),
  ('expressionBo -> expressionAR MOREEQUAL expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',147),
  ('expressionBo -> expressionAR LESSEQUAL expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',148),
  ('expressionBo -> expressionBo NOTEQUAL expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',149),
  ('expressionBo -> expressionAR NOTEQUAL expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',150),
  ('expressionBo -> expressionBo EQUALSTO expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',151),
  ('expressionBo -> expressionAR EQUALSTO expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',152),
  ('expressionBo -> TRUE','expressionBo',1,'p_expressionBo_int','plintax.py',176),
  ('expressionBo -> FALSE','expressionBo',1,'p_expressionBo_int','plintax.py',177),
  ('expressionBo -> LPAREN expressionBo RPAREN','expressionBo',3,'p_expressionBo_group','plintax.py',185),
]
