
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLESSMOREEQUALSTOMOREEQUALLESSEQUALNOTEQUALleftPLUSMINUSleftTIMESDIVIDEleftANDORrightUMINUSINT FLOAT PLUS MINUS TIMES DIVIDE EQUALS LPAREN RPAREN LCURLBRACKET RCURLBRACKET ID COMMENT STRING ASSIGN SEMICOLON COMMA POINT NOT EQUALSTO MORE LESS MOREEQUAL LESSEQUAL NOTEQUAL AND OR INCREMENT DECREMENT BREAK CASE CHAN CONST CONTINUE DEFAULT DEFER ELSE FALLTHROUGH FOR FUNC GO GOTO IF IMPORT INTERFACE MAP PACKAGE RANGE RETURN SELECT STRUCT SWITCH TYPE VAR MAIN FMT PRINT SCAN TRUE FALSEstatement : PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET\n                 | PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKETlist : inst\n            | inst listassignment : ID ASSIGN expressionAR\n                  | ID ASSIGN expressionBo\n                  | ID EQUALS expressionAR\n                  | ID EQUALS expressionBo\n                  | ID INCREMENT\n                  | ID DECREMENTinst : FOR expressionBo LCURLBRACKET list RCURLBRACKET\n            | FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKETinst : assignment SEMICOLONinst : IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET\n            | IF expressionBo LCURLBRACKET list RCURLBRACKETlistID : expressionAR\n              | expressionBo\n              | expressionBo COMMA listID\n              | expressionAR COMMA listIDIDlist : ID\n              | ID COMMA IDlistinst : FMT POINT PRINT LPAREN listID RPAREN SEMICOLON\n            | FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON\n            | FMT POINT PRINT LPAREN RPAREN SEMICOLON\n            | FMT POINT SCAN LPAREN RPAREN SEMICOLONexpressionAR : expressionAR PLUS expressionAR\n                    | expressionAR MINUS expressionAR\n                    | expressionAR TIMES expressionAR\n                    | expressionAR DIVIDE expressionAR\n                    | IDexpressionAR : INTexpressionAR : MINUS expressionAR %prec UMINUSexpressionAR : FLOATexpressionAR : LPAREN expressionAR RPARENexpressionBo : expressionAR MORE expressionAR\n                    | expressionAR LESS expressionAR\n                    | expressionAR MOREEQUAL expressionAR\n                    | expressionAR LESSEQUAL expressionAR\n                    | expressionBo NOTEQUAL expressionBo\n                    | expressionAR NOTEQUAL expressionAR\n                    | expressionBo EQUALSTO expressionBo\n                    | expressionAR EQUALSTO expressionAR\n                    | expressionBo AND expressionBo\n                    | expressionBo OR expressionBoexpressionBo : NOT expressionBo %prec UMINUSexpressionBo : TRUE\n                    | FALSEexpressionBo : LPAREN expressionBo RPAREN'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,12,19,],[0,-2,-1,]),'MAIN':([2,6,],[3,7,]),'IMPORT':([3,],[4,]),'STRING':([4,],[5,]),'FUNC':([5,],[6,]),'LPAREN':([7,14,16,24,27,29,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,60,62,63,66,89,106,107,],[8,27,27,27,27,60,66,66,27,27,27,27,27,60,60,60,60,60,60,60,60,60,60,60,89,90,66,66,66,66,]),'RPAREN':([8,25,26,30,31,34,56,57,58,59,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,95,97,98,99,101,114,115,117,],[9,-46,-47,-31,-33,-30,-45,85,86,-32,-39,-41,-43,-44,-35,-36,-37,-38,-40,-42,-26,-27,-28,-29,-48,-34,86,96,100,86,104,-16,-17,108,-20,-19,-18,-21,]),'LCURLBRACKET':([9,21,25,26,30,31,33,34,38,39,56,59,64,65,67,68,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,102,103,],[10,40,-46,-47,-31,-33,61,-30,-9,-10,-45,-32,-5,-6,-7,-8,-39,-41,-43,-44,-35,-36,-37,-38,-40,-42,-26,-27,-28,-29,-48,-34,111,112,]),'RCURLBRACKET':([10,11,13,20,32,69,88,92,94,105,109,113,116,118,119,120,121,],[12,19,-3,-4,-13,92,94,-11,-15,-24,-25,-22,-23,120,121,-12,-14,]),'FOR':([10,13,32,40,61,92,94,105,109,111,112,113,116,120,121,],[14,14,-13,14,14,-11,-15,-24,-25,14,14,-22,-23,-12,-14,]),'IF':([10,13,32,40,61,92,94,105,109,111,112,113,116,120,121,],[16,16,-13,16,16,-11,-15,-24,-25,16,16,-22,-23,-12,-14,]),'FMT':([10,13,32,40,61,92,94,105,109,111,112,113,116,120,121,],[17,17,-13,17,17,-11,-15,-24,-25,17,17,-22,-23,-12,-14,]),'ID':([10,13,14,16,24,27,29,32,36,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,60,61,66,89,90,92,93,94,105,106,107,109,110,111,112,113,116,120,121,],[18,18,28,34,34,34,34,-13,34,34,18,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,18,34,34,101,-11,18,-15,-24,34,34,-25,101,18,18,-22,-23,-12,-14,]),'NOT':([14,16,24,27,36,37,41,42,43,44,45,66,89,106,107,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'TRUE':([14,16,24,27,36,37,41,42,43,44,45,66,89,106,107,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'FALSE':([14,16,24,27,36,37,41,42,43,44,45,66,89,106,107,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'INT':([14,16,24,27,29,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,60,66,89,106,107,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'MINUS':([14,16,23,24,27,28,29,30,31,34,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,64,66,67,75,76,77,78,79,80,81,82,83,84,86,87,89,91,97,106,107,],[29,29,53,29,29,-30,29,-31,-33,-30,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,53,-32,29,53,29,53,53,53,53,53,53,53,-26,-27,-28,-29,-34,53,29,53,53,29,29,]),'FLOAT':([14,16,24,27,29,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,60,66,89,106,107,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'SEMICOLON':([15,22,25,26,30,31,34,38,39,56,59,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,96,100,104,108,],[32,45,-46,-47,-31,-33,-30,-9,-10,-45,-32,-5,-6,-7,-8,-39,-41,-43,-44,93,-35,-36,-37,-38,-40,-42,-26,-27,-28,-29,-48,-34,105,109,113,116,]),'POINT':([17,],[35,]),'ASSIGN':([18,28,],[36,36,]),'EQUALS':([18,28,],[37,37,]),'INCREMENT':([18,28,],[38,38,]),'DECREMENT':([18,28,],[39,39,]),'NOTEQUAL':([21,23,25,26,28,30,31,33,34,56,57,58,59,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,97,98,],[41,50,-46,-47,-30,-31,-33,41,-30,-45,41,50,-32,50,41,50,41,None,None,-43,-44,41,-35,-36,-37,-38,-40,-42,-26,-27,-28,-29,-48,-34,50,50,41,]),'EQUALSTO':([21,23,25,26,28,30,31,33,34,56,57,58,59,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,97,98,],[42,51,-46,-47,-30,-31,-33,42,-30,-45,42,51,-32,51,42,51,42,None,None,-43,-44,42,-35,-36,-37,-38,-40,-42,-26,-27,-28,-29,-48,-34,51,51,42,]),'AND':([21,25,26,30,31,33,34,56,57,59,65,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,98,],[43,-46,-47,-31,-33,43,-30,-45,43,-32,43,43,43,43,-43,-44,43,-35,-36,-37,-38,-40,-42,-26,-27,-28,-29,-48,-34,43,]),'OR':([21,25,26,30,31,33,34,56,57,59,65,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,98,],[44,-46,-47,-31,-33,44,-30,-45,44,-32,44,44,44,44,-43,-44,44,-35,-36,-37,-38,-40,-42,-26,-27,-28,-29,-48,-34,44,]),'MORE':([23,28,30,31,34,58,59,64,67,81,82,83,84,86,91,97,],[46,-30,-31,-33,-30,46,-32,46,46,-26,-27,-28,-29,-34,46,46,]),'LESS':([23,28,30,31,34,58,59,64,67,81,82,83,84,86,91,97,],[47,-30,-31,-33,-30,47,-32,47,47,-26,-27,-28,-29,-34,47,47,]),'MOREEQUAL':([23,28,30,31,34,58,59,64,67,81,82,83,84,86,91,97,],[48,-30,-31,-33,-30,48,-32,48,48,-26,-27,-28,-29,-34,48,48,]),'LESSEQUAL':([23,28,30,31,34,58,59,64,67,81,82,83,84,86,91,97,],[49,-30,-31,-33,-30,49,-32,49,49,-26,-27,-28,-29,-34,49,49,]),'PLUS':([23,28,30,31,34,58,59,64,67,75,76,77,78,79,80,81,82,83,84,86,87,91,97,],[52,-30,-31,-33,-30,52,-32,52,52,52,52,52,52,52,52,-26,-27,-28,-29,-34,52,52,52,]),'TIMES':([23,28,30,31,34,58,59,64,67,75,76,77,78,79,80,81,82,83,84,86,87,91,97,],[54,-30,-31,-33,-30,54,-32,54,54,54,54,54,54,54,54,54,54,-28,-29,-34,54,54,54,]),'DIVIDE':([23,28,30,31,34,58,59,64,67,75,76,77,78,79,80,81,82,83,84,86,87,91,97,],[55,-30,-31,-33,-30,55,-32,55,55,55,55,55,55,55,55,55,55,-28,-29,-34,55,55,55,]),'COMMA':([25,26,30,31,34,56,59,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,97,98,101,],[-46,-47,-31,-33,-30,-45,-32,-39,-41,-43,-44,-35,-36,-37,-38,-40,-42,-26,-27,-28,-29,-48,-34,106,107,110,]),'PRINT':([35,],[62,]),'SCAN':([35,],[63,]),'ELSE':([94,],[103,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'list':([10,13,40,61,111,112,],[11,20,69,88,118,119,]),'inst':([10,13,40,61,111,112,],[13,13,13,13,13,13,]),'assignment':([10,13,14,40,61,93,111,112,],[15,15,22,15,15,102,15,15,]),'expressionBo':([14,16,24,27,36,37,41,42,43,44,45,66,89,106,107,],[21,33,56,57,65,68,70,71,72,73,74,57,98,98,98,]),'expressionAR':([14,16,24,27,29,36,37,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,60,66,89,106,107,],[23,23,23,58,59,64,67,23,23,23,23,23,75,76,77,78,79,80,81,82,83,84,87,91,97,97,97,]),'listID':([89,106,107,],[95,114,115,]),'IDlist':([90,110,],[99,117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET list RCURLBRACKET','statement',11,'p_statement_expr','plintax.py',20),
  ('statement -> PACKAGE MAIN IMPORT STRING FUNC MAIN LPAREN RPAREN LCURLBRACKET RCURLBRACKET','statement',10,'p_statement_expr','plintax.py',21),
  ('list -> inst','list',1,'p_list','plintax.py',29),
  ('list -> inst list','list',2,'p_list','plintax.py',30),
  ('assignment -> ID ASSIGN expressionAR','assignment',3,'p_assignment','plintax.py',37),
  ('assignment -> ID ASSIGN expressionBo','assignment',3,'p_assignment','plintax.py',38),
  ('assignment -> ID EQUALS expressionAR','assignment',3,'p_assignment','plintax.py',39),
  ('assignment -> ID EQUALS expressionBo','assignment',3,'p_assignment','plintax.py',40),
  ('assignment -> ID INCREMENT','assignment',2,'p_assignment','plintax.py',41),
  ('assignment -> ID DECREMENT','assignment',2,'p_assignment','plintax.py',42),
  ('inst -> FOR expressionBo LCURLBRACKET list RCURLBRACKET','inst',5,'p_inst_For','plintax.py',56),
  ('inst -> FOR assignment SEMICOLON expressionBo SEMICOLON assignment LCURLBRACKET list RCURLBRACKET','inst',9,'p_inst_For','plintax.py',57),
  ('inst -> assignment SEMICOLON','inst',2,'p_inst_assignment','plintax.py',65),
  ('inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET ELSE LCURLBRACKET list RCURLBRACKET','inst',9,'p_inst_If','plintax.py',70),
  ('inst -> IF expressionBo LCURLBRACKET list RCURLBRACKET','inst',5,'p_inst_If','plintax.py',71),
  ('listID -> expressionAR','listID',1,'p_listID','plintax.py',78),
  ('listID -> expressionBo','listID',1,'p_listID','plintax.py',79),
  ('listID -> expressionBo COMMA listID','listID',3,'p_listID','plintax.py',80),
  ('listID -> expressionAR COMMA listID','listID',3,'p_listID','plintax.py',81),
  ('IDlist -> ID','IDlist',1,'p_IDlist','plintax.py',88),
  ('IDlist -> ID COMMA IDlist','IDlist',3,'p_IDlist','plintax.py',89),
  ('inst -> FMT POINT PRINT LPAREN listID RPAREN SEMICOLON','inst',7,'p_inst_func','plintax.py',105),
  ('inst -> FMT POINT SCAN LPAREN IDlist RPAREN SEMICOLON','inst',7,'p_inst_func','plintax.py',106),
  ('inst -> FMT POINT PRINT LPAREN RPAREN SEMICOLON','inst',6,'p_inst_func','plintax.py',107),
  ('inst -> FMT POINT SCAN LPAREN RPAREN SEMICOLON','inst',6,'p_inst_func','plintax.py',108),
  ('expressionAR -> expressionAR PLUS expressionAR','expressionAR',3,'p_expressionAR_binop','plintax.py',118),
  ('expressionAR -> expressionAR MINUS expressionAR','expressionAR',3,'p_expressionAR_binop','plintax.py',119),
  ('expressionAR -> expressionAR TIMES expressionAR','expressionAR',3,'p_expressionAR_binop','plintax.py',120),
  ('expressionAR -> expressionAR DIVIDE expressionAR','expressionAR',3,'p_expressionAR_binop','plintax.py',121),
  ('expressionAR -> ID','expressionAR',1,'p_expressionAR_binop','plintax.py',122),
  ('expressionAR -> INT','expressionAR',1,'p_expressionAR_int','plintax.py',137),
  ('expressionAR -> MINUS expressionAR','expressionAR',2,'p_expressionAR_inverse','plintax.py',142),
  ('expressionAR -> FLOAT','expressionAR',1,'p_expressionAR_float','plintax.py',147),
  ('expressionAR -> LPAREN expressionAR RPAREN','expressionAR',3,'p_expressionAR_group','plintax.py',152),
  ('expressionBo -> expressionAR MORE expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',159),
  ('expressionBo -> expressionAR LESS expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',160),
  ('expressionBo -> expressionAR MOREEQUAL expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',161),
  ('expressionBo -> expressionAR LESSEQUAL expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',162),
  ('expressionBo -> expressionBo NOTEQUAL expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',163),
  ('expressionBo -> expressionAR NOTEQUAL expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',164),
  ('expressionBo -> expressionBo EQUALSTO expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',165),
  ('expressionBo -> expressionAR EQUALSTO expressionAR','expressionBo',3,'p_expressionBo_binop','plintax.py',166),
  ('expressionBo -> expressionBo AND expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',167),
  ('expressionBo -> expressionBo OR expressionBo','expressionBo',3,'p_expressionBo_binop','plintax.py',168),
  ('expressionBo -> NOT expressionBo','expressionBo',2,'p_expressionBo_inverse','plintax.py',189),
  ('expressionBo -> TRUE','expressionBo',1,'p_expressionBo_int','plintax.py',195),
  ('expressionBo -> FALSE','expressionBo',1,'p_expressionBo_int','plintax.py',196),
  ('expressionBo -> LPAREN expressionBo RPAREN','expressionBo',3,'p_expressionBo_group','plintax.py',204),
]
